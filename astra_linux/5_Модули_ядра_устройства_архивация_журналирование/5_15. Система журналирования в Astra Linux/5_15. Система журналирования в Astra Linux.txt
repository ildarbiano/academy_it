План урока:
Основные системные журнальные файлы
Примеры использования syslog-ng
Настройка службы журналирования systemd-journald
Использование утилиты journalctl для получения сообщений из journald
Ротация журналов при помощи logrotate
Afick
Пример прямой настройки Afick
Практическое задание

==================== Основные системные журнальные файлы =========================================================================================
В Astra Linux системные журнальные файлы позволяют узнать, как работает система.  Это нужно для выявления и устранения ошибок и проблем.
Основные системные журнальные файлы в Astra Linux (вложенние "файлы журналы системные в Astra Linux основные")
/var/log/messages		информация о работе ядра ОС и сервисов
/var/log/syslog			системные сообщения от демонов и сервисов
/var/log/auth.log		попытки аутентификации на системе
/var/log/kern.log		сообщения о ядре сиситемы
Чтение системных журнальных файлов позволяет быстрее обнаруживать и исправлять проблемы в системе, что позволяет снизить время простоя системы и сохранить её производительность и безопасность. 


==================== Примеры использования syslog-ng =============================================================================================
		Служба журналирования 
syslog-ng 				— это инструмент для сбора и анализа журналов системы в операционной системе Astra Linux. Она позволяет собирать логи с нескольких источников, фильтровать их и отправлять на центральный сервер для дополнительного анализа. Примеры использования
syslog-ng 		Централизованное журналирование,-	с помощью syslog-ng можно настроить централизованную систему журналирования, когда все журналы с клиентских машин отправляются на сервер журналирования. Это позволяет упростить анализ и мониторинг системных событий.
Syslog-ng		Фильтрация журналов, 		-	позволяет фильтровать журналы по различным параметрам, таким как уровень источника (facility), уровень (level). Это позволяет сократить объём журналов и сосредоточиться на важных событиях.
Syslog-ng 		Отправка журналов по сети, 	-	позволяет отправлять журналы по сети на удалённый сервер. Это полезно, когда необходимо собирать журналы с удалённых машин или когда необходимо сохранить журналы на отдельном сервере для безопасности.
Журналирование логов является важным аспектом любого проекта, особенно тех, которые имеют высокую нагрузку и полагаются на большое количество разных компонентов и сервисов. 
Журналирование позволяет в реальном времени отслеживать работу приложения, находить ошибки и проблемы, а также анализировать данные для улучшения работы системы в целом.


==================== Настройка службы журналирования systemd-journald ============================================================================
sudo systemctl edit systemd-journald.service		-	если требуется изменить настройки журнала событий, выставленные по умолчанию. Эта команда откроет редактор, где вы можете отредактировать текст файла конфигурации службы журналирования. После редактирования нужно сохранить изменения и перезапустить системную службу для применения настроек. Примеры настроек, которые можно изменить с помощью этой команды во вложение "systemd-jornald команды настройки журналирования".
В зависимости от конфигурации, которую вы выбрали, вы можете изменять различные параметры вашего журнала событий. Многие из этих параметров позволяют определить максимальную вместимость журналов, уровень записи журналов, и интервалы времени ротации журналов.


==================== Использование утилиты journalctl для получения сообщений из systemd-journald ========================================================
Журналирование системных событий также может быть реализовано через службу journalctl в составе systemd-journald. Эта служба позволяет логировать различные действия, происходящие на сервере, а также проанализировать логи в удобочитаемом формате. Чтобы настроить и использовать систему журналирования systemd-journald, необходимо выполнить следующие шаги - кортинка из вложенния "systemd-jornald настройка"
Эти команды могут использоваться в терминале для управления журнальными данными. Они помогают просматривать и анализировать журналы событий на сервере, а также сохранять и очищать их, например:
journalctl 			без аргументов позволяет просмотреть все доступные журналы;
journalctl -p err -t sshd 	позволяет отфильтровать все журналы с уровнем критичности "error" и тэгом "sshd".
В целом, управление журналами событий с помощью systemd-journald является удобным и эффективным способом контроля над работой системы. Он позволяет быстро и эффективно анализировать журнальные данные и выявлять потенциальные проблемы, которые могут возникнуть на сервере.


==================== Настройка службы журналирования syslog-ng ============================================================================================
Служба журналирования 
syslog-ng 				— это инструмент для сбора и анализа журналов системы в операционной системе Astra Linux. Она позволяет собирать логи с нескольких источников, фильтровать их и отправлять на центральный сервер для дополнительного анализа.
syslog-ng 				- Для начала работы нужно установить пакет syslog-ng. Это можно сделать с помощью менеджера пакетов apt.
sudo apt-get install syslog-ng		- Для установки в терминале нужно выполнить команду.
/etc/syslog-ng/syslog-ng.conf		- После установки вам нужно настроить службу syslog-ng. Основной файл конфигурации находится по пути 
syslog-ng				- Настройки службы журналирования 
-------------------- Сбор логов с удаленных хостов: В файле конфигурации укажите настройки для применения tcp или udp протоколов на центральном сервере. Например, если вы хотите собрать логи с удаленного хоста, необходимо добавить следующие строки в файле конфигурации на удаленном хосте:
	source s_remote {         
	                tcp(ip("ЦЕНТРАЛЬНЫЙ_СЕРВЕР_IP") port(514));
		};
	destination d_server {
	                file("/var/log/remote/${SOURCEIP}.log");
	        };
-------------------- Фильтрация по имени пользователя: Вы можете отфильтровать сообщения логов по имени пользователя, используя маску %{USER}:
	filter f_user {match("%{USER}", value("root"))};

-------------------- Пример полного конфигурационного файла
	@version: 3.5
	@include "scl.conf"
	# Источники журналов
	source s_system { system(); };
	source s_network { udp(ip("0.0.0.0") port(514)); };
	# Фильтры
	filter f_kernel { facility(kern); };
	filter f_auth { facility(authpriv); };
	filter f_mail { facility(mail); };
	filter f_info { level(info); };
	# Места назначения
	destination d_file { file("/var/log/syslog-ng/$HOST/$YEAR/$MONTH/$DAY/$FACILITY.log"); };
	destination d_remote { udp("192.168.1.100" port(514)); };
	# Правила
	log { source(s_system); filter(f_kernel); destination(d_file); };
	log { source(s_system); filter(f_auth); destination(d_file); };
	log { source(s_system); filter(f_mail); destination(d_file); };
	log { source(s_network); filter(f_info); destination(d_remote); };
В этом примере syslog-ng собирает журналы с источников system и network. Журналы фильтруются по уровню источника (facility) и уровню (level), а затем отправляются в файл или по сети на удаленный сервер.
sudo systemctl restart syslog-ng		Запуск и проверка. После настройки конфигурационного файла необходимо перезапустить службу syslog-ng.
sudo tail -f /var/log/syslog-ng/syslog-ng.log	Чтобы проверить, что syslog-ng правильно работает, можно выполнить команду. Эта команда позволяет просмотреть последние записи в лог-файле syslog-ng.



==================== Ротация журналов при помощи logrotate ================================================================================================
Logrotate 				— это утилита для автоматической ротации журналов в Linux. Она позволяет сжимать, архивировать и удалить старые журналы, чтобы сохранить свободное место на диске и предотвратить переполнение журналов. Настройка logrotate включает несколько шагов:
sudo apt-get install logrotate		- Установка logrotate. Logrotate обычно уже установлен на большинстве дистрибутивов Linux. 
/etc/logrotate.d/			- Создание конфигурационного файла. Конфигурационные файлы ротации журналов различных служб находятся в /etc/logrotate.d/ В этих файлах задаются параметры ротации журналов, такие как путь к журналам, периодичность ротации и действия после ротации.
	# Пример конфигурационного файла для ротации всех журналов
	# Путь к журналам
	/var/log/*.log {
        	# Периодичность ротации (еженедельно)
	        weekly
	        # Количество сохраняемых копий (4)
	        rotate 4
	        # Сжимать старые файлы
	        compress
	        # Создавать новый файл после ротации
	        create
	        # Установить права доступа к новому файлу
	        su root syslog
	        # Установить права доступа к директории
	        create 0640 root syslog
		}
В этом примере logrotate ротирует все файлы с расширением .log в директории /var/log. Журналы ротируются еженедельно и сохраняются в количестве 4 копий. Старые файлы сжимаются, новый файл создается после ротации, а права доступа к файлам и директории устанавливаются для пользователя root и группы syslog.
/var/log/{нужная_служба}.log		- Создание отдельных конфигурационных файлов для журналов, для каждого журнала можно создать отдельный конфигурационный файл, чтобы задать индивидуальные параметры ротации.
/var/log/{нужная_служба}.log {
	  rotate 12 		# максимальное количество файлов хранения
	  monthly 		# годовой, месячный, недельный, дневной
	  compress 		# архивирование и сжатие
	  delaycompress 	# последний и предпоследний файл не будут заархивированы
	  missingok 		# если файла лога нет, то не будет и нотификации об ошибке
	  size 100M 		# размер лога, после которого он будет ротирован
	  dateext 		# добавит дату ротации перед заголовком старого лога
	  create 		# создаст пустой файл после того, как старый будет ротирован
	  postrotate/endscript 	# выполнит после ротации какой-нибудь скрипт
	  <путь к скрипту или команда>
		}
sudo logrotate /etc/logrotate.conf	- Запуск и проверка. После настройки конфигурационного файла необходимо запустить logrotate. Эта команда запускает ротацию всех журналов, указанных в конфигурационном файле.
sudo tail -f /var/log/syslog		- Чтобы проверить, что logrotate правильно работает. Эта команда позволяет просмотреть последние записи в системном журнале, где выводятся сообщения о ротации журналов.


==================== Afick и пример прямой настройки Afick =============================================================================
afick				- Another File Integrity ChecKer
Afick 				- позволяет контролировать целостность файловой системы путём создания слепков файлов. Слепки (или хэши) содержат уникальные строки, которые представляют состояние файлов в момент слепка. Изменение состояния файла приводит к изменению его хэша, что позволяет быстро обнаруживать любой вредоносный код или нежелательные изменения.
Afick				- фиксирует изменения в файлах и каклогах на файловой системе. Поможет в расследовании инцидента, когда необходимо определить "какие были изменения на файловой системе". Формирует базу данных каталогов, файлов и соответствующую им md5
Afick 				- позволяет настраивать аудит в соответствии с вашими потребностями, а также может отправлять уведомления о нарушении целостности в файловой системе.
sudo apt-get install afick	- Установите Afick.
sudo afick -c /etc/afick.conf -s /tmp/afick.saf -M				- Создайте слепок файловой системы.
touch /etc/testfile								- Измените файловую систему.
sudo afick -c /etc/afick.conf -s /tmp/afick.saf -g /etc/afick.report -z		- Сравните слепок с каталогом файлов. Это создаст новый отчет в каталоге /etc/afick.report, который покажет, что файл /etc/testfile был изменен.
/etc/afick.conf			- Конфигурационный файл Afick. Настройка через конфигурационный файл. В этом файле задаются параметры мониторинга файловой системы, такие как путь к директориям, которые нужно мониторить, и исключения файлов и директорий. Пример конфигурационного файла для Afick
		# Путь к директориям для мониторинга
		/path/to/directory {
	        # Режим мониторинга (рекурсивный)
	        mode=recursive
	        # Исключения файлов и директорий
	        exclude=/path/to/directory/exclude1
	        exclude=/path/to/directory/exclude2
	        # Режим мониторинга (только чтение)
	        checksum=sha256
	        # Файл для хранения базы данных
	        dbfile=/var/lib/afick/afick.db
		}		- В этом примере Afick мониторит директорию /path/to/directory рекурсивно, исключая файлы и директории exclude1 и exclude2. Режим мониторинга установлен на, только, чтение с использованием алгоритма хеширования SHA-256. База данных Afick хранится в файле /var/lib/afick/afick.db.
sudo afick -c /etc/afick.conf -t init			После настройки конфигурационного файла необходимо запустить Afick. Эта команда инициализирует базу данных Afick.
sudo afick -c /etc/afick.conf -t check			Чтобы проверить, что Afick правильно работает. Эта команда позволяет проверить целостность файлов в мониторируемой директории и выдать отчет о любых изменениях.
Afick 							- это эффективный инструмент для обеспечения безопасности файловой системы в Astra Linux, и может использоваться как основной инструмент для мониторинга целостности файловой системы в рамках системы безопасности в целом.


