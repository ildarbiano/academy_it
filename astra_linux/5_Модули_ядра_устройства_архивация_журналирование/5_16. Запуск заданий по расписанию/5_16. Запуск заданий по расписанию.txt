Запуск заданий по расписанию
План урока
Запуск задания
Периодическое выполнение заданий с помощью anacron
Планирование выполнения заданий через systemd
Отложенное выполнение заданий с помощью службы atd
Запуск разовых заданий в указанное время через systemd-run
Практическое задание



===================== Запуск задания crontab-e ==========================================================================
cron			для выполнения задач, которые должны запускаться в строго определённое время или с определённой частотой.
crontab -e 		Запускаем команду и меняем записи: минута час день месяц день_недели путь_к_скрипту_или_непосредственно_команда
crontab -l		Просмотр 
Если время запуска не важно — указываем *. Например, запустим shell-скрипт на каждую ночь в 3 часа 10 минут:
10 3 * * * /home/admuser/my.sh
Каждая строка в crontab состоит из пяти полей времени и команды, разделённых пробелами или табуляциями: 
*	минута (0–59);
*	час (0–23);
*	день (1–31);
*	месяц (1–12);
*	день_недели (0–7, где 0 и 7 — воскресенье);
команда.
 
Можно использовать специальные символы для указания диапазонов и интервалов: 
* 	— любое значение;
, 	— список значений;
- 	— диапазон значений;
/ 	— шаг.


===================== Периодическое выполнение заданий с помощью anacron ================================================
Anacron 		это утилита для периодического выполнения одноразовых задач на компьютерах, которые не работают круглосуточно. В отличие от cron она работает в фоновом режиме и выполняет задачи, которые были пропущены при предыдущем запуске. 
Anacron 		использует не такие подробные параметры, как cron.
Anacron 		не подходит для выполнения задач, которые должны запускаться в строго определённое время или с определённой частотой: для этого лучше подходит cron.
/etc/anacrontab 	В конфигурационном файле вы можете настроить выполнение задач в зависимости от периодичности и задержки. Формат задания:
period delay job-identifier command
	period		— частота выполнения задания, указанная в виде: @daily, @weekly или @monthly для одного раза в день, неделю или месяц соответственно; также можно использовать числа:  1 — ежедневно, 7 — еженедельно, 30 — ежемесячно, — и N – количество дней;
	delay		— количество минут ожидания перед выполнением задания;
	job-identifier 	— идентификатор задания (имя задания);
	command 	— команда или скрипт, который нужно выполнить.
Примеры использования
1. Допустим, каждый день в 06:00 вам нужно выполнять одну задачу. Если ваш компьютер в это время не работает, anacron запустит задачу при следующем включении. Таким образом, пропущенные задачи выполнятся в тот день, когда компьютер будет включён.
2. У вас есть скрипт, который создаёт резервные копии сайта каждые сутки в 02:00. Если в какой-то момент компьютер был выключен или недоступен, anacron выполнит задачу при следующем запуске системы, так что вы не потеряете резервные копии.
Примеры из конфигурационного файла /etc/anacrontab
7 15 job1 /usr/bin/script.sh 		cкрипт `/usr/bin/script.sh` будет запускаться еженедельно с задержкой в 15 минут после запуска anacron.
@weekly job2 /home/user/backup.sh 	cкрипт `/home/user/backup.sh` будет запускаться еженедельно в соответствии с запуском anacron.
30 1 job3 /home/user/cleanup.sh 	cкрипт `/home/user/cleanup.sh` будет запускаться каждый месяц с задержкой в одну минуту после запуска anacron.
1 5 job4 /home/user/reboot.sh 		cкрипт `/home/user/reboot.sh` будет запускаться каждый день с задержкой в пять минут после запуска anacron.
Anacron 		это хороший инструмент для автоматического выполнения задач на компьютерах, которые не работают круглосуточно.



===================== Планирование выполнения заданий через systemd =====================================================
Systemd 				это подсистема инициализации и управления службами, которая позволяет планировать выполнение заданий с помощью таймеров (timers). 
/etc/systemd/system/{name}.timer	директория предназначена для пользовательских файлов юнитов и может быть использована, как /lib/systemd/system/.
/usr/lib/systemd/system/{name}.timer	файл с расширением .timer в директории /usr/lib/systemd/system или /lib/systemd/system. Чтобы  поставить таймер. В этом файле укажем параметры таймера, /lib/systemd/system/{name}.timer:
·         интервал запуска,
·         точность,
·         задержка перед первым запуском.
Например, создадим таймер /lib/systemd/system/{name}.timer:, который будет запускаться каждый день в 10:00.
	```
	[Unit]
		Description=Daily backup timer
	[Timer]
		OnCalendar=*-*-* 10:00:00
		Persistent=true
	[Install]
		WantedBy=timers.target
	```
	OnCalendar 			задаёт время запуска таймера. Значение *-*-* определяет, что таймер будет запускаться каждый день.
	10:00:00 			время запуска. 
	Persistent 			гарантирует, что таймер сработает даже в случае перезагрузки системы.
	WantedBy=timers.target 		это означает, что таймер будет запускаться вместе с другими.
/etc/systemd/system/{name}.service	директория предназначена для пользовательских файлов юнитов и может быть использована, как /lib/systemd/system/
/usr/lib/systemd/system/{name}.service	после файла .timer, в той же директории, создадим файл .service. Его также будет запускать таймер. Например, создадим службу, которая будет выполнять резервное копирование каждый день в 10:00, /lib/systemd/system/{name}.service:
	```
	[Unit]
		Description=Daily backup service
	[Service]
		Type=oneshot
		ExecStart=/usr/bin/backup.sh
	[Install]
		WantedBy=multi-user.target
	```
	Type=oneshot			означает, что служба будет запускаться только один раз при каждом срабатывании таймера.
	ExecStart 			задаёт команду для запуска службы.
	WantedBy 			параметр указывает на целевую точку монтирования timers.target, которая является частью systemd.
	```
systemctl daemon-reload			после создания файлов .timer и .service перезапускаем демон systemd.
systemctl start {daily-backup}.timer	запускаем таймер. Теперь таймер будет запускаться и запускать службу для выполнения резервного копирования каждый день в 10 утра. 
Systemd 				ищет файл .service в директории {name}.timer и запускает его. Обратите внимание, что в файле .timer параметр WantedBy указывает на целевую точку монтирования timers.target, которая является частью systemd. Таймер в systemd запускает службу по имени файла .service, который указан в настройках. В приведённом примере имя файла .service указано как daily-backup.service. Например, в файле .timer из примера параметр WantedBy имеет значение timers.target — это означает, что таймер будет запускаться вместе с другими. Если файл .service невозможно найти или его название не совпадает с именем файла .service, указанным в таймере, то systemd выдаст ошибку и служба не запустится. Также можно использовать команду 
systemctl list-timers			увидеть список активных таймеров и последнее время запуска каждого из них.
Мы можем использовать таймеры для запуска заданий с определённой периодичностью. Например, создадим таймер, который будет запускаться каждые пять минут:
	```
	[Unit]
		Description=Every 5 minutes timer
	[Timer]
		OnUnitActiveSec=5min
		Unit=every-5-minutes.service
	[Install]
		WantedBy=timers.target
	```
	Requires={name}.service 	Указание строгой зависимости в [Unit]
	OnUnitActiveSec 		задаёт интервал запуска таймера в секундах. срабатывает через указанное время после активации целевого юнита;
	OnUnitInactiveSec — срабатывает так же, как OnUnitActiveSec, только время отсчитывается с момента прекращения работы целевого юнита, хорошо подходит для «длительных» задач, например, бекапов.
	OnCalendar - срабатывает по условию календаря. В качестве формата даты для календаря используется формат:
	DOW YYYY-MM-DD HH:MM:SS (где DOW – Day Of Week – день недели, необязательный параметр; за ним следует указание 	года, месяца, дня через дефис и часы, минуты и секунды через двоеточие. Для указания любого значения используется 	«*», перечисления делаются через запятую, а диапазоны через «..»).
	Unit 				включает службу, которую запустит таймер.
Создадим службу, которая будет выводить текущее время каждые пять минут:
	```
	[Unit]
		Description=Every 5 minutes service
	[Service]
		Type=oneshot
		ExecStart=/bin/date
	[Install]
		WantedBy=multi-user.target
	```
systemctl start every-5-minutes.timer	запускаем таймер и службу. Таймер будет запускаться каждые пять минут и запускать службу для вывода текущего времени.
/lib/systemd/system			для создания файлов .timer и .service в systemd можно использовать также директорию 
/etc/systemd/system			для создания файлов .timer и .service в systemd можно использовать также. директория предназначена для пользовательских файлов юнитов и может быть использована, как /lib/systemd/system/.
/lib/systemd/system, не только /etc/systemd/system. 
/etc/systemd/system 			директория предназначена для пользовательских файлов юнитов. 
/lib/systemd/system			директория предназначена для установки файлов юнитов при помощи пакетов операционной системы или других программ, однако при использовании директории /usr/lib/systemd/system, пользователь не может удалить или изменить файлы юнитов.
systemctl daemon-reload			чтобы systemd перечитала файлы конфигурации и обновила свою конфигурацию.  В любом случае, независимо от директории, в которой будут созданы файлы .timer и .service, необходимо перегрузитб демона.



===================== Отложенное выполнение заданий с помощью службы atd ========================================================================
atd 					служба в Linux откладывает решение задач на определённое время. Она позволяет пользователю планировать выполнение заданий даже в то время, когда он не будет находиться за компьютером.
sudo apt-get install at			служба atd устанавливается командой: 
at					после установки службы atd можно использовать, чтобы запланировать выполнение заданий. At принимает на вход команду, которую нужно выполнить, и время, когда её нужно выполнить. Например:
at 17:00at> echo "Hello, world" > /tmp/hello.txtat> Ctrl+D
	Команда at в 17:00 запустит интерактивный режим at.
	Команда echo записывает строку "Hello, world" в файл /tmp/hello.txt.
	Вводим команду, которую нужно выполнить, и нажимаем Ctrl + D, чтобы закончить ввод команды.
	Эта команда будет выполнена в 17:00.
Есть также возможность указать время выполнения задания с точностью до минуты:
at 23:30 25.12.2023
      at> /usr/bin/backup-script
      at> Ctrl + D
После реализации команды at задание добавляется в очередь на выполнение. 
atq					просмотреть текущий список заданий, запланированных для выполнения службой atd. Она покажет список заданий в формате.
      3 Sat Apr 23 13:00:00 2023 a username
      4 Sat Apr 23 14:00:00 2023 a username
	Как видим, два задания были добавлены в очередь. Номер задания отображается слева, за ним следуют дата и время запуска задания, а затем идентификатор пользователя, от имени которого запланировано выполнение задания.
atrm 3					удалить запланированное задание, указав номер задания, которое необходимо удалить. Эта команда удалит задание номер 3 из очереди на выполнение. Обычно служба atd автоматизирует такие задачи, как создание регулярных резервных копий, выполнение скриптов обслуживания, обновление баз данных и т. п.
Примеры использования:
	запуск резервного копирования в определённое время каждую неделю; 
	запуск скрипта очистки логов системы (например, каждые три месяца);
	запуск скрипта обновления базы данных в определённое время (например, каждую ночь в 03:00).
atd 	служба atd — это мощный инструмент для планирования и автоматизации регулярных задач, которые нужно выполнять в определённое время.
atd 	позволяет откладывать выполнение команд для управления подсистемами, если задачу нужно решить позже.


===================== Запуск разовых заданий в указанное время через systemd-run ================================================================
systemd-run 			команда запускает разовые задания в указанное время через systemd. Чтобы запустить разовые задания через systemd-run, зададим точное время, когда необходимо решить задание и вводим команду для выполнения.
sudo systemd-run --on-active=9:30:00 --unit=myecho -- "echo 'Hello, world!'"		выполнить команду echo "Hello, world!" 11 июня 2023 года в 09:30, можно использовать следующую команду.
	--on-active=9:30:00	задаёт время, когда нужно выполнить задание;
	--unit=myecho 		задаёт имя юнита, под которым будет запущено задание;
	"echo 'Hello, world!'"	команда, которую нужно выполнить. После выполнения команды systemctl создаст файл systemd unit с именем myecho.service в директории /run/systemd/system.
sudo systemd-run --on-calendar=15:30 --unit=mytask -- "backup_script.sh"		указать календарное время запуска задания, необходимо ввести ключевое слово --on-calendar вместо --on-active. 
	backup_script.sh 	команда будет запускаться ежедневно в 15:30.
systemd-run			другие опции
	--user			опция, запускает задания от имени пользователя. Подсистема systemd-run помогает контролировать запуск разовых заданий в системе и планировать выполнение задач. Она позволяет задавать время запуска задания в различных форматах, а также управлять параметрами выполнения. К примеру, если у вас есть скрипт, который вы хотите выполнять каждый раз при запуске системы, создайте файл systemd unit и запустите его через systemctl enable. Также можно настроить периодическую реализацию скрипта с помощью systemd-таймеров. Так задание будет выполняться каждый день, неделю, месяц или год в определённое время.
Systemd-run 			мощный инструмент для автоматизации выполнения задач в Linux, который обладает широким функционалом, что делает его удобным в использовании.


