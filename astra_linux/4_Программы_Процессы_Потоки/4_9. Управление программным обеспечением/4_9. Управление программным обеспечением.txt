План урока:

Компоненты системы управления ПО
Именование и структура программных пакетов
Структура репозитория программного обеспечения
Менеджеры программных пакетов dpkg, apt, apt-команды, aptitude
Подключение репозиториев и установка обновлений Astra Linux
Оптические диски
Использование неподписанного репозитория
Обновления Astra Linux
Практическое задание



Руководство пользователя aptitude			https://www.debian.org/doc/manuals/aptitude/index.ru.html
Оперативные обновления для Astra Linux Special Edition	https://wiki.astralinux.ru/pages/viewpage.action?pageId=158612043


============= Компоненты системы управления ПО в Linux ================================

Компоненты системы управления ПО в Linux позволяют управлять установкой, обновлением и удалением ПО, а также его зависимостями и настройками. Это позволяет пользователям легко управлять своими системами и поддерживать их в актуальном состоянии.
Компоненты системы управления ПО включают в себя следующие элементы:
Пакетный менеджер 
 — ПО, которое управляет установкой, обновлением и удалением пакетов программного обеспечения на компьютере. В Linux существует несколько пакетных менеджеров, таких как apt-get, yum, pacman и другие. В Astra Linux используется пакетный менеджер apt-get. Он наиболее популярен в deb-системах. Наряду с ним часто также используют aptitude и dpkg.

Aptitude
 — это текстовый интерфейс для управления пакетами в Linux. Он является одним из наиболее распространённых пакетных менеджеров в Debian и его производных дистрибутивах, таких как Ubuntu.
Основные функции Aptitude:
	Установка, обновление и удаление пакетов ПО
	Поиск пакетов по ключевым словам, описанию и другим параметрам
	Просмотр информации о пакетах: зависимости, размер, версия и др.
	Управление зависимостями пакетов, включая автоматическую установку необходимых зависимостей
	Обработка конфликтов между пакетами
	Создание списков задач для установки нескольких пакетов одновременно
	Управление репозиториями, включая добавление и удаление репозиториев
	Aptitude имеет простой и интуитивно понятный интерфейс командной строки, который позволяет пользователям легко управлять пакетами программного обеспечения на своей системе.

Репозиторий 
— это хранилище пакетов ПО, которые могут быть установлены с помощью пакетного менеджера. Репозиторий может быть официальным или неофициальным и содержать различные версии ПО.

Зависимости 
— это библиотеки и другие компоненты, которые нужны для работы определённого ПО. Пакетный менеджер автоматически устанавливает все необходимые зависимости при установке ПО.

Конфигурационные файлы
 — это файлы, которые содержат настройки ПО. Они могут быть изменены пользователем под свои нужды.

Система контроля версий
 — это инструмент, который используется для отслеживания изменений в исходном коде ПО. Git является одним из наиболее распространённых инструментов контроля версий в Linux.

Сборочные инструменты
 — это ПО, которое используется для компиляции и сборки исходного кода. Некоторые из наиболее распространённых сборочных инструментов в Linux включают в себя GCC, Make и CMake.

Система автоматической сборки
 — это инструмент, который автоматически собирает и устанавливает ПО из исходного кода. Некоторые из наиболее распространённых систем автоматической сборки в Linux включают в себя Jenkins, Travis CI и GitLab CI/CD.


=================== Именование и структура программных пакетов ===============================
В Astra Linux программные пакеты именуются с помощью стандартной схемы именования, которая используется в Debian и Ubuntu.  Имя пакета состоит из двух частей: названия пакета и его версии, разделённых символом дефиса.
Например, пакет с именем "apache2-2.4.18" имеет название "apache2" и версию "2.4.18".

Структура программных пакетов в Astra Linux также соответствует стандартной схеме Debian. Каждый пакет содержит файлы, необходимые для установки и работы программы, а также метаданные, описывающие пакет, его зависимости и другую информацию.
Рассмотрим наименование и версионирование пакета:
	example-package_1.0-1_amd64.deb
example-package 	— название пакета
1.0		 	— номер версии
1 			— номер ревизии (если были внесены изменения в пакет после его первоначального выпуска)		amd64			— архитектура, для которой был собран пакет
Структура deb-пакета обычно следующая (вы можете открыть любой пакет *.deb для просмотра без распаковки с помощью утилиты mc — mc→выбираем пакет→enter)


==================== Структура репозитория программного обеспечения ===========================================
Astra Linux использует структуру репозитория, подобную Debian.
Основные компоненты репозитория Astra Linux:
dists/ 				— директория, которая содержит файлы Packages.gz и Release, которые содержат информацию обо всех доступных пакетах в репозитории и их версиях
pool/ 			— директория, которая содержит все пакеты, разделённые по категориям и включающие их разные версии
security/ 		— содержит обновления безопасности для уже установленных пакетов
updates/ 		— содержит исправления ошибок и новые функции для уже установленных пакетов
project/ 		— содержит дополнительные файлы, связанные с проектом
Пример структуры репозитория Astra Linux:
astra/
├── dists/
│   ├── stable/
│   │   ├── main/
│   │   │   ├── binary-amd64/
│   │   │   │   ├── Packages.gz
│   │   │   │   ├── Release
│   │   │   │   ├── package1.deb
│   │   │   │   └── package2.deb
│   │   ├── security/
│   │   └── updates/
├── pool/
│   ├── main/
│   │   ├── package1/
│   │   ├── package2/
│   ├── contrib/
│   ├── non-free/
└── project/

Каталог pool/ в репозитории Astra Linux содержит пакеты, поделённые на несколько категорий: main, contrib и non-free.
Каждая категория содержит подкатегории, которые дополнительно разделяют пакеты по их назначению или функционалу. Кроме того, каждый пакет может иметь несколько версий в зависимости от того, какой релиз системы он поддерживает и есть ли для него обновления.

main		- содержит бесплатные пакеты, которые полностью соответствуют свободной лицензии GNU GPL и могут использоваться в любых целях.
contrib		- содержит пакеты, которые не являются свободными, но зависят от пакетов, находящихся в категории main. Они обычно не могут быть использованы в коммерческих целях или имеют ограниченные права использования.
non-free	- содержит программное обеспечение, которое не является свободным и не может быть включено в категорию main или contrib.

=================== Менеджеры программных пакетов Dpkg, Apt, Apt-команды, Aptitude ===================================
Продолжая обзор менеджеров программных пакетов dpkg, apt и aptitude, стоит отметить, что каждый из них может быть использован в различных сценариях. 

Dpkg (Debian Package) 
	— это инструмент, который предоставляет набор команд для установки, удаления и управления пакетами программного обеспечения в системах, основанных на Debian. Он работает через командную строку и обеспечивает надёжное управление пакетами, но не позволяет эффективно управлять зависимостями между пакетами. если вам нужно управлять пакетами низкого уровня и устанавливать их ручным способом, то dpkg может быть наиболее подходящим вариантом. Он предоставляет простой и надёжный интерфейс для управления пакетами и установки их на систему.
sudo dpkg -i packagename.deb		Пример команды для установки пакета через dpkg

Apt (Advanced Package Tool) 
	— это менеджер пакетов, который обеспечивает более высокоуровневый интерфейс управления пакетами, чем dpkg. Он также работает через командную строку, но предоставляет дополнительные функции, такие как автоматическое управление зависимостями при установке пакетов и возможность установки пакетов из нескольких источников. Если же вам нужно автоматически установить пакеты и управлять зависимостями между ними, то apt может быть наиболее подходящим вариантом. Он может автоматически решать зависимости и устанавливать необходимые пакеты, что делает процесс установки программного обеспечения гораздо более удобным и быстрым. Так как apt является наиболее используемым пакетным менеджером, ниже представлена краткая инструкция по использованию команды apt:
sudo apt update				Обновление списка пакетов
sudo apt install <пакет>		Установка пакетов
sudo apt remove <пакет>			Удаление пакетов
sudo apt upgrade			Обновление установленных пакетов
apt search <запрос>			Поиск пакетов
sudo apt autoremove			Очистка ненужных пакетов

Aptitude
	 — это менеджер пакетов высокого уровня, который обеспечивает более мощный и удобный интерфейс, чем dpkg или apt. Aptitude обеспечивает ещё более мощный и удобный интерфейс для управления пакетами, но может быть сложным в использовании для новичков. Он имеет множество функций, таких как управление зависимостями и расширенный поиск пакетов, что делает его полезным инструментом для продвинутых пользователей. Aptitude очень мощный инструмент управления пакетами, поэтому будьте очень осторожны – неправильное применение aptitude может привести к неработоспособности системы. Он предоставляет текстовый интерфейс для управления пакетами и имеет множество функций: управление зависимостями и расширенный поиск пакетов. 
sudo aptitude install packagename	установка пакета через aptitude.

Таким образом, выбор менеджера программных пакетов зависит от потребностей пользователя.


================= Подключение репозиториев Astra Linux ===============================================================
Видео


================= Настройка сервиса блокирования сетевых портов iptables =============================================
		Конфигурация сетевого экрана iptables может быть сложной задачей, но следуя некоторым базовым правилам, мы можем с лёгкостью настроить правила блокирования портов в Linux.
----------------- 1.Создание правила блокирования порта -----------------------------------------------------------
sudo iptables -I INPUT -p tcp --dport PORT_NUMBER -j DROP		Для создания правила блокирования порта в iptables
	где PORT_NUMBER - порт, который необходимо заблокировать.

sudo iptables -A INPUT -p tcp --dport 80 -j DROP			блокирование порта 80 (HTTP) должно выглядеть так
Блок 	INPUT	— это входящие на сервер запросы, 	
	OUTPUT	— исходящие. 
	FORWARD — перенаправление запросов на шлюз, на внутренний IP-адрес на определённом интерфейсе, т. е. маршрутизация пакетов в локальной сети.
Где атрибуты:
-I INPUT 		— для того, чтобы вставить новое правило в список
-i 			— через какой сетевой интерфейс
-p и --dport 		— описывает протокол и порт
-j 			— описывает цель правила (DROP, ACCEPT, REJECT)
Дополнительные атрибуты можно посмотреть тут: https://www.opennet.ru/man.shtml?topic=iptables&category=8&russian=0

----------------- 2.Сохранение правил iptables ---------------------------------------------------------------------
sudo iptables-save > /etc/iptables/rules.v4				охранить правила iptables. Эта команда сохранит текущее состояние правил iptables в /etc/iptables/rules.v4.

----------------- 3.Настройка правил iptables для автозагрузки системы ---------------------------------------------
Нужно создать скрипт, чтобы выполнять сохранённое состояние iptables при загрузке системы.
Для этого:
1.      Создайте новый файл в каталоге /etc/network/if-pre-up.d/ и назовите его, например, iptables-rules:
sudo nano /etc/network/if-pre-up.d/iptables-rules
2.      Добавьте следующий код со ссылкой на файл, содержащий сохранённые правила iptables:
#!/bin/bash
iptables-restore < /etc/iptables/rules.v4
exit 0
3.      Сохраните и закройте файл
4.      Перезагрузите систему для применения настроек — они будут автоматически применены при загрузке системы
5.      Проверьте успешность соединения с заблокированным портом

После перезагрузки системы можно использовать команду iptables -L для проверки действующих правил iptables. Если правила настроены правильно, соединение с заблокированным портом должно отбрасываться.

Конфигурация iptables может быть сложной, поэтому необходимо быть осторожным при изменении или удалении правил, чтобы не повредить работу сети. Желательно регулярно сохранять состояние правил и тестировать сетевые соединения после каждого изменения.



=================== Подключение репозиториев Astra Linux ==================================================================
Для того, чтобы указать программам установщикам пакетов репозитории, из которых будут загружаться устанавливаемые пакеты, следует для каждого репозитория сформировать строку вида:
deb <путь_корневому_каталогу_репозитория> <код_дистрибутива> <список_компонент>
1.    Эти строки добавить в файл /etc/apt/sources.list или в файлы с произвольными именами и расширением .list, расположенные в каталоге /etc/apt/sources.list.d.
2.    После каждого внесения изменений в файлы с описанием репозиториев следует обновить списки пакетов: sudo apt update
К Astra Linux можно подключать локальные, сетевые и расположенные на оптических дисках или iso репозитории.



=================== ISO-образы ============================================================================================
Для подключения ISO-образов как репозиториев необходимо:
1.    Смонтировать файл с ISO-образом в выбранный каталог такой же командой, как и устройство, указав вместо имени устройства имя файла:
sudo mount <имя_файла_с_образом_диска> <каталог_монтирования>

2.    Для автоматического монтирования сохраненного ISO-образа добавить в файл /etc/fstab строку вида:
<полное_имя_файла_с_образом> /opt/repo iso9660 defaults,nofail 0 0

3.    Опция монтирования nofail требуется для того, чтобы загрузка ОС не прекращалась при отсутствии файла с ISO-образом.

Для сетевых репозиториев в описании пути к репозиторию применяется тег, указывающий протокол подключения:
    http:// — протокол HTTP (используется в интернет-репозиториях Astra Linux)
    https:// — протокол HTTPS (используется в интернет-репозиториях Astra Linux);
    ftp:// — протокол FTP (не используется в интернет-репозиториях Astra Linux)
Например, указание сетевого репозитория, работающего по протоколу HTTP:
deb https://dl.astralinux.ru/astra/stable/1.7_x86-64/repository-main/ 1.7_x86-64 main contrib non-free

Для использования сетевых репозиториев, работающих по протоколу HTTPS, необходимо, чтобы в системе был установлен пакет apt-transport-https и пакет ca-certificates:
sudo apt policy apt-transport-https ca-certificates			Проверить наличие пакетов можно командой

Для установки из сетевых репозиториев указанных пакетов в случае их отсутствия необходимо:
        - Временно сменить протокол интернет-репозиториев в файле /etc/apt/source.list на протокол http. Пример указания репозитория с использованием протокола http:
deb http://dl.astralinux.ru/astra/stable/1.7_x86-64/repository-main/ 1.7_x86-64 main contrib non-free

        - Обновить список доступных для установки пакетов:
sudo apt update

        - Установить пакеты apt-transport-https и ca-certificates командой:
sudo apt install apt-transport-https ca-certificates

       - Сменить протокол интернет-репозиториев в /etc/apt/source.list на https

       - Повторно обновить список доступных для установки пакетов:
sudo apt update

Что делать если вы не можете найти нужный пакет в предоставленных репозиториях?
Не переходите к нему пока не попробуете ответить на него самостоятельно.
Если не можете найти нужный вам пакет в предоставленных репозиториях, вы можете попробовать найти его в других репозиториях, в том числе сторонних. Как уже было сказано, для этого можно добавить новый файл .list в директорию sources.list.d со ссылками на другие репозитории. Однако следует учитывать, что использование сторонних репозиториев не всегда безопасно, так как пакеты могут быть вредоносными или неправильно собранными.


=================== Подключение стороннего репозитория ==================================================================
Давайте рассмотрим подключение сторонних репозиториев, например, репозиториев Debian.
Для этого:
1.    Необходимо установить пакет  debian-archive-keyring. Важно: установка debian-archive-keyring и подключение сторонних репозиториев Debian релиза buster происходит только после обновления Astra Linux до версии 1.7.3:
sudo apt install debian-archive-keyring

2.    Затем добавить описание репозиториев, например, в файл /etc/apt/sources.list.d/buster.list:
deb https://deb.debian.org/debian/               buster         main contrib non-free
deb https://security.debian.org/debian-security/ buster/updates main contrib non-free

3.    Обновим кеш пакетов:
sudo apt update
Сущ:1 http://dl.astralinux.ru/astra/stable/1.7_x86-64/repository-update 1.7_x86-64 InRelease                     
Сущ:2 http://dl.astralinux.ru/astra/stable/1.7_x86-64/repository-base 1.7_x86-64 InRelease                       
Сущ:3 http://dl.astralinux.ru/astra/stable/1.7_x86-64/repository-extended 1.7_x86-64 InRelease                   
Cущ:4 https://security.debian.org/debian-security buster/updates InRelease                                        
Сущ:5 https://deb.debian.org/debian buster InRelease

4. Таким образом сторонние репозитории Debian подключены



================== Создание собственного репозитория =====================================================================
Чтобы создать свой репозиторий, необходимо выполнить следующие шаги:
1. Установить пакет reprepro:
sudo apt install reprepro

2. Создать каталог для размещения репозитория:
sudo mkdir <путь_к_репозиторию>

3. Создать в каталоге репозитория подкаталог conf:
sudo mkdir <путь_к_репозиторию>/conf

4. Создать в подкаталоге conf файл distributions следующего содержания:
Origin: Debian
Codename: smolensk
Suite: stable
Version: 1.7.0
Architectures: amd64
Components: main contrib non-free
UDebComponents: main
SignWith: yes
где:
Codename: 		smolensk — кодовое имя дистрибутива: подходит
        для Astra Linux Special Edition РУСБ.10015-01 очередное обновление 1.7 - 1.7_x86-64;
        для Astra Linux Special Edition РУСБ.10152-02 очередное обновление 1.7 - 4.7_arm64;
        для Astra Linux Special Edition РУСБ.10015-01 очередное обновление 1.6 - 1.6_x86-64;
        для Astra Linux Common Edition - 2.12_x86-64.

Suite: 			stable — ветка дистрибутива:
        stable
        current
        unstable

Version: 		1.7.0 — номер версии (можно использовать номер очередного обновления и актуально оперативного обновления)

Architectures: 		архитектура дистрибутива:
            i386 (в Astra Linux не используется)
            amd64
            source (если репозиторий будет содержать исходный код пакетов)

Components: 		компоненты дистрибутива:
	main — свободно распространяемое ПО
        contrib — свободно распространяемое ПО с зависимостями от несвободного ПО
        non-free — несвободное ПО

UDebComponents: 	main - Udeb-пакеты
Contents: 		файлы со списком содержимого каждого пакета
SignWith: 		yes — подпись репозитория (можно не указывать, если не планируете подписывать репозиторий ключом gnupg)

5. Выполнить команду:
sudo reprepro -b <путь_к_репозиторию> export

После этого можно наполнять репозиторий пакетами:
1.    Добавление бинарного deb-пакета:
sudo reprepro -b <путь_к_репозиторию> includedeb <кодовое_имя_дистрибутива> <путь_к_пакету/имя_пакета>.deb

2.    Добавление всех пакетов deb:
sudo reprepro -b <путь_к_репозиторию> includedeb <кодовое_имя_дистрибутива> <путь_к_пакетам>/*.deb

При появлении ошибки: No priority given for '<имя_пакета>', skipping выполнить добавление пакета с игнорированием приоритета с помощью опции -P:
sudo reprepro -P -V -b <путь_к_репозиторию> includedeb <кодовое_имя_дистрибутива> <путь_к_пакету/имя_пакета>.deb

3.    Добавление бинарного udeb-пакета:
sudo reprepro -b <путь_к_репозиторию> includeudeb <кодовое_имя_дистрибутива> <путь_к_пакету/имя_пакета>.udeb

4.    Добавление пакета с исходным текстом:
sudo reprepro -b <путь_к_репозиторию> includedsc <кодовое_имя_дистрибутива> <путь_к_пакету/имя_пакета>.dsc

5.    Удаление пакета:
sudo reprepro -b <путь_к_репозиторию> remove <кодовое_имя_дистрибутива> <имя_пакета_без_версии>

6.    Для очистки ранее сгенерированной базы данных репозитория можно использовать команду:
sudo reprepro -b <путь_к_репозиторию> clearvanished



========================= Подписание репозитория =================================================================================
Чтобы прописать репозиторий необходимо:
1.      Сгенерировать gpg-ключ (RSA или DSA):
gpg --gen-key
Команда генерации ключа запросит необязательные данные, которые можно не вводить:
    - имя пользователя
    - адрес e-main пользователя
    - пароль (дополнительный на сам ключ)
2.      Ввести, если необходимо, запрошенные данные и подтвердить создание ключа
3.      Убедиться, что в файле /<путь_к_репозиторию>/conf/distributions присутствует строка:
            SignWith: yes
4.      Далее выполнить команду:
sudo reprepro --ask-passphrase -b <путь_к_репозиторию/имя> export
(параметр --ask-passphrase запрашивает пароль для gpg-ключа)
5.      После чего наполнить репозиторий:
sudo reprepro --ask-passphrase -b <путь_к_репозиторию/имя> includedeb <кодовое имя дистрибутива> <имя_пакета>.deb
----------------------------
Чтобы начать пользоваться подписанным репозиторием, который мы создали на предыдущих шагах, необходимо:
1.      На компьютере, где создавался репозиторий, получить список ключей:
    gpg --list-keys
    gpg: проверка таблицы доверия
    gpg: marginals needed: 3  completes needed: 1  trust model: pgp
    gpg: глубина: 0  достоверных:   1  подписанных:   0  доверие: 0-, 0q, 0n, 0m, 0f, 1u
    gpg: срок следующей проверки таблицы доверия 2024-02-10
    /home/le/.gnupg/pubring.kbx
    ---------------------------
    pub   rsa3072 2022-02-10 [SC] [   годен до: 2024-02-10]
          ECBD2F097D49CD738EB378201623A5978DBFC107
    uid         [  абсолютно ] support <support@astralinux.ru>
    sub   rsa3072 2022-02-10 [E] [   годен до: 2024-02-10]

2.      Выполнить экспорт ключа, используя адрес электронной почты:
    sudo gpg --armor --output repo_gpg.key --export support@astralinux.ru

3.      В результате будет получен файл repo_gpg.key в текущем каталоге, который необходимо скопировать на компьютер, где будет использоваться данный репозиторий, и добавить его в систему (для добавления ключа нужны привилегии суперпользователя):
    sudo apt-key add repo_gpg.key


======================== Установка обновлений ===================================================================================
Чтобы установить обновления нужно:
1.      Подключить интернет-репозитории Astra Linux, для этого в файле /etc/apt/sources.list добавляем строки:
deb http://dl.astralinux.ru/astra/frozen/1.7_x86-64/1.7.4/repository-main/ 1.7_x86-64 main contrib non-free
deb http://dl.astralinux.ru/astra/frozen/1.7_x86-64/1.7.4/repository-update/ 1.7_x86-64 main contrib non-free

2.      Сохраняем
Важно: если в качестве источников пакетов указан оптический установочный диск,
deb cdrom:[<наименование_установочного_диска>]/ 1.7_x86-64 contrib main non-free
то эту строку необходимо удалить или закомментировать (установить символ "#" в начале строки).

3.      Выполняем повторную синхронизацию файлов описаний пакетов с их источником, для этого выполняем команду:
sudo apt update

4.      Устанавливаем обновление, выполнив команду:
sudo astra-update -A -r

Важно: если по каким-либо причинам вы остановили обновление, то перед повторной установкой обновлений выполните команду 
sudo apt install -f


======================== Оптические диски =========================================================================================
Для подключения репозиториев на оптических дисках нужно:
1/	Установить диск в привод
2/	Выполнить команды:
                 sudo apt-cdrom add
                 sudo apt update
3/	Указанную процедуру повторить для каждого используемого диска
В дальнейшем для установки пакетов нужно будет устанавливать (заменять в приводе) зарегистрированные диски по мере необходимости.


======================== Использование неподписанного репозитория =================================================================
Чтобы разрешить использовать неподписанные репозитории, следует в описание репозитория на компьютере, на котором выполняется установка, добавить ключ  [trusted=yes].
При этом строка описания репозитория будет выглядеть так:
deb [trusted=yes] https://download.astralinux.ru/astra/stable/2.12_x86-64/repository stable contrib main non-free
Использование неподписанных репозиториев по умолчанию запрещено, будьте очень осторожны используя неподписанные репозитории.


======================== Обновления Astra Linux ===================================================================================
Оперативные обновления предназначены для оперативного устранения критических уязвимостей и уязвимостей высокого уровня опасности в экземплярах очередных обновлений ОС, находящихся в эксплуатации, и представляют собой бюллетень безопасности, который доступен в виде:
1/	Инструкций и методических указаний по настройке и особенностям эксплуатации ОС, содержащих сведения о компенсирующих мерах или ограничениях по применению ОС при эксплуатации.
2/	Отдельных программных компонентов из состава ОС, в которые внесены изменения с целью устранения уязвимостей, инструкций по их установке и настройке, а также информации, содержащей сведения о контрольных суммах всех файлов оперативного обновления.
3/	Обновлений безопасности, представляющих собой файл с совокупностью программных компонентов из состава ОС, в которые внесены изменения с целью устранения уязвимостей, а также информации, содержащей сведения о контрольных суммах всех файлов обновлений безопасности, указания по установке, настройке и особенностям эксплуатации ОС с установленными обновлениями безопасности.