======= Сети ===================================================
icmp	Протокол (ping)
udp	Протокол 
tcp	Протокол (ssh) мешает firewall

	ip a				получить список всех ip адресов назначенных всем сетевым интерфейсам
	netstat -nltp			статистика адресов и соединений, которые LISTEN
	network manager			надстройка над утилитой ip
	ifup/ipdown eth0
	sudo ip link set up eth0	включить сетевую карту
	sudo dhclient			запрос в широковещательный адрес (на всех) запрос who is, чтобы получить ip-address.
	sudo apt update
	sudo iwlist scan					поиск WiFi сетей
	wpa_passphrase {name}					настройка WiFi
	wpa_supplicant -B -Dnl80211 -iwlan0 -cwpa.conf		подключение к WiFi
	ping {fqdn}
	traceroute {fqdn}
	telnet {ip address} {port}	Trying. Conection refus (Firewall) / Connected
	curl -ivk {ip address}:{port}	Trying. Conection refus (Firewall) / Connected
	telnet -lpn			выяснение какие службы запущены и есть ли SSH, для подключения с внешнего терминала 
	netstat -nltp
	netstat -atp
	nc -l 11111
	открыть второй терминал ctrl/alt F2-F5
	nc 127.0.0.1. 11111
	ps a
	nmap				сканер компьютеров, сетей, портов. Анализ сети на проникновения (безопасность)
	sudo iptables			фильтрация трафика от нас, к нам на определённый внешний IP-addres (свой адресс и порты не управляются) Цепочки правил
	sudo iptables -A INPUT -p tcp --dport 11111 -j REJECT (DROP)	
	sudo iptable -L  | grep 11111 			
	sudo ufw status (stat)		Uncomplicated Firewall. надстройка над iptables, который работает на уровне ядра.


====== Хронология лекции ====
ip a
	eth0: ************ DOWN
	ls \dev\eth0
	ifup(ipdown) eth0		отживщая, устаревшая утилита подключения(выключения) устройства
современная утилита, для этих целей
	sudo ip link up eth0		подключить устройство
sudo ifconfig eth0 up			подключить устройство
	ip a
	eth0: ************ UP		сетевая карта вклюена. Осталось войти в сеть. Через dhcp сервер - это утилита, которая выдаёт адреса в сети.
sudo dhclient			запрос адреса машины у DHCP сервера
	ip a			=
	ifconfig		=
	inet 10.0.2.15/24 brd 10.0.2.255 scope global eth0
sudo apt update
telnet {ip address} {port}	Trying. Conection refus (Firewall) / Connected
curl -ivk https://{{fqdn}}:{{port}}
nslookup {{fqdn}}
netstat -lpn			выяснение какие службы запущены и есть ли SSH, для подключения с внешнего терминала MobaXtarm
sudo apt install openssh-server
sudo ufw status			Firewall
sudo ufw disable		Firewall отключение
sudo ufw deny {{port}}		запрет/закрытие порта. deny proto tcp to any port 80
				запрет/закрытие порта. deny proto tcp from {{ip}} to any port 80

sudo apt install screen		утилита, позволяет управлять несколькими меансами терминала в рамках одного терминала
sudo apt install ncdu		утилита для анализа дискового пространства


====== Устройства ===========
	sudo mount /dev/sr0 /media/cdrom0
	cat /etc/ntab
	sudo umount /media/cdrom0
	ls /dev
====== File System ====== подключение файловых систем. Зачем?
	ls -li				идентификаторы FS (inode) которыми оперирует Linux (имена файлов Linux не интересует)
	sudo fdisk 
	sudo parted		
	sudo mkfs			умеет форматировать диск в той или иной FS	
	sudo blkid
	lsusb
	lsblk
	EXT, Ext2, Ext3, Ext4


===========  
План урока:
===========
Сетевые интерфейсы.
Настройка сетевых интерфейсов с помощью ifup/ifdown (служба networking).
Настройка сетевых интерфейсов с помощью Network Manager.
Команды диагностики сети.
Сетевые порты.
Настройка сервиса блокирования сетевых портов iptables.
Практическое задание.

=========== Сетевые интерфейсы в Linux =====================================================================
	— это способ подключения компьютера к сети. Они используются для обеспечения связи между различными устройствами на сети, а также для предоставления доступа к локальным и удалённым ресурсам. В Linux сетевые интерфейсы могут быть настроены как статически, так и динамически с помощью таких инструментов как ifconfig, ip и Network Manager. Кроме того, Linux поддерживает множество протоколов сетевого уровня, включая Ethernet, Wi-Fi, Bluetooth и другие.
Существует также возможность применения различных сетевых настроек, таких как bonding и teaming, для повышения отказоустойчивости и скорости соединения.  Например, bonding позволяет объединить несколько физических интерфейсов в один логический с большей пропускной способностью и повышенной отказоустойчивостью.
Как правило в Linux сетевые интерфейсы называются eth0, eth1 и так далее.
В целом Linux предоставляет множество возможностей для настройки сетевых интерфейсов и обеспечения связи между устройствами в сети.

=========== Настройка сетевых интерфейсов с помощью ifup/ifdown (служба networking) =========================
+ видео

/etc/network/interfaces			Конфигурационные файлы сетевых интерфейсов
ifconfig				просмотр состояния интерфейсов	
ip a					просмотр состояния интерфейсов
Службу networking в Linux можно использовать для настройки сетевых интерфейсов с помощью команд ifup и ifdown. Рассмотрим, как это можно сделать:
1.Откройте файл конфигурации /etc/network/interfaces, чтобы настроить интерфейсы. 
/etc/network/interfaces
Например, для интерфейса eth0, ваш файл конфигурации может выглядеть так:
auto eth0
iface eth0 inet static
	address 192.168.1.100
	netmask 255.255.255.0
	gateway 192.168.1.1
sudo systemctl restart networking	перезапустить службу networkingперезапустить службу networking
sudo ifup eth0				активация интерфейса
sudo ifconfig eth0 up			активация интерфейса
sudo ifdown eth0			деактивации интерфейса
Также можно использовать другие инструменты для настройки сетевых интерфейсов в Linux: ip и NetworkManager.


========== Настройка сетевых интерфейсов с помощью network manager =============================================
		Служба Network Manager — удобный и гибкий инструмент для настройки сетевых интерфейсов с помощью командной строки в Linux. Чтобы использовать инструмент nmcli в командной строке Linux для настройки сетевых интерфейсов с помощью Network Manager, необходимо:
sudo apt install network-manager
sudo systemctl restart network-manager
Открыть командную строку.
nmcli connection show						Просмотреть список доступных сетевых подключений по команде;		
nmcli connection show [имя_подключения]				Просмотреть подробную информацию о сетевом подключении;
nmcli connection add con-name [имя_подключения] ifname [имя_интерфейса] type [тип_подключения] [дополнительные параметры]  	создать новое сетевое подключение.
nmcli connection add con-name my-eth0 ifname eth0 type ethernet ip4 192.168.1.100/24 gw4 192.168.1.1
nmcli connection modify [имя_подключения] [параметры]		Чтобы изменить существующее сетевое подключение, использовать команду.
nmcli connection modify my-eth0 ipv4.addresses 192.168.1.200/24 ipv4.gateway 192.168.1.1
nmcli connection delete [имя_подключения]			Чтобы удалить сетевое подключение, использовать команду.
nmcli connection delete my-eth0
Такой подход к настройке сетевых интерфейсов в командной строке может быть особенно полезен в том случае, когда у вас нет графической оболочки или вы работаете удалённо через терминал.
Кроме того, nmcli также поддерживает дополнительные параметры для настройки сетевых интерфейсов: VPN, Wi-Fi, мосты и т. д.
В целом, использование Network Manager в командной строке предоставляет удобный и мощный инструмент для настройки сетевых интерфейсов в Linux.
Также для настройки сетевых интерфейсов можно использовать nmtui — это псевдографический инструмент для NetworkManager, который позволяет настраивать несколько соединений, включая Ethernet, Wi-Fi, VPN и т. д.
nmtui				Network Manager Text User Interface, альтернатива командной строке.
Чтобы использовать nmtui для настройки сетевых интерфейсов в Linux:
1.      Откройте командную строку.
sudo nmtui      		запустить nmtui: 
3.      Используйте стрелки на клавиатуре, чтобы перемещаться в меню Edit a connection, и выберите соединение, которое хотите настроить. Затем нажмите Enter.
4.      Используйте стрелки на клавиатуре, чтобы перемещаться по настройкам соединения, и введите необходимые значения. Затем нажмите OK.
5.      Повторите шаги 3 и 4 для настройки других соединений.
6.      Нажмите F10, чтобы сохранить настройки и выйти из nmtui.
Таким образом, с помощью nmtui можно быстро и легко настроить сетевые интерфейсы в Linux, используя удобный текстовый интерфейс.


========== Команды диагностики сети =====================================================================
	Команды диагностики сети в Linux помогают анализировать сетевой трафик и определять наличие проблем в сети. Вот несколько примеров таких команд:
ping 			— отправляет ICMP-пакет на заданный хост и ждёт ответа. Результат показывает время отклика и количество потерянных пакетов. 
ping google.com
traceroute 		— выводит маршрут, по которому пакеты идут до заданного хоста. 
traceroute google.com
netstat			— выводит список открытых сетевых портов и соединений. 
netstat -an
tcpdump 		— анализирует и записывает сетевой трафик. Результаты можно фильтровать по протоколу, IP-адресу, порту и другим параметрам. 
tcpdump -i eth0 host 10.0.0.2 and port 80
nmap 			— сканирует сеть и определяет открытые порты и службы.
nmap -sS 192.168.1.1
Эти команды могут быть полезны для администраторов и инженеров, работающих с сетями в Linux. Они помогают выявлять проблемы с сетью и защищать её от угроз.


========== Сетевой порт в Linux ===================================================================================
		— это числовой идентификатор сетевого соединения или сервиса, который позволяет множеству приложений использовать сетевую подсистему. 
Каждый порт — это 16-битное число от 0 до 65535. Многие порты зарезервированы для известных служб:
HTTP 	(порт 80), 
HTTPS 	(порт 443), 
SSH 	(порт 22), 
FTP 	(порт 21) и т. д.
netstat 		— выводит список открытых сетевых портов. Пример команды, которая выводит все сетевые соединения и открытые порты:
netstat -a
nmap 			— позволяет сканировать порты сетевых устройств и серверов, чтобы определить, какие из них открыты. Пример запуска nmap для сканирования открытых портов на хосте:
nmap -sS hostname
telnet 			— позволяет подключиться к удалённому хосту по указанному порту. Пример подключения к удаленному хосту с использованием telnet на порту 80:
telnet hostname 80
Конфигурация сетевых портов может быть настроена с помощью iptables.
sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT		разрешить входящий трафик через порт 80 (HTTP)
Понимание сетевых портов в Linux поможет:
	настроить конфигурации сетевых служб и заблокировать уязвимые порты, повышая безопасность сети и устойчивость к угрозам.
	обнаружить проблемы в сети и в настройке правил сетевой защиты, чтобы предотвратить несанкционированный доступ к системе.
	улучшить производительность сетевых сервисов. Например, закрытие ненужных портов снизит нагрузку на систему и улучшит её производительность.


========== Настройка сервиса блокирования сетевых портов iptables ==================================================
Конфигурация сетевого экрана iptables может быть сложной задачей, но следуя некоторым базовым правилам, мы можем с лёгкостью настроить правила блокирования портов в Linux.
---------- Создание правила блокирования порта ---------------------------------------------------------------------
sudo iptables -I INPUT -p tcp --dport PORT_NUMBER -j DROP		Для создания правила блокирования порта в iptables
	где PORT_NUMBER							- порт, который необходимо заблокировать.
sudo iptables -A INPUT -p tcp --dport 80 -j DROP			блокирование порта 80 (HTTP)
	INPUT 								— это Блок входящих на сервер запросов; 
	OUTPUT 								— исходящие. А 
	FORWARD 							— перенаправление запросов на шлюз, на внутренний IP-адрес на определённом интерфейсе, т. е. маршрутизация пакетов в локальной сети.
-I INPUT 								— атрибуты для того, чтобы вставить новое правило в список
-i									— атрибут через какой сетевой интерфейс
-p 									— атрибут описывает протокол;
--dport 								— атрибут описывает порт;
-j 									— атрибут описывает цель правила (DROP, ACCEPT, REJECT);
https://www.opennet.ru/man.shtml?topic=iptables&category=8&russian=0	- Дополнительные атрибуты можно посмотреть тут 

---------- Сохранение правил iptables -------------------------------------------------------------------------------
Чтобы сохранить правила iptables, нужно выполнить команду:
sudo iptables-save > /etc/iptables/rules.v4				- сохранит текущее состояние правил iptables в /etc/iptables/rules.v4.

---------- Настройка правил iptables для автозагрузки системы -------------------------------------------------------
Нужно создать скрипт, чтобы выполнять сохранённое состояние iptables при загрузке системы.
Для этого:

1.-------- Создайте новый файл в каталоге /etc/network/if-pre-up.d/ и назовите его, например, iptables-rules:
sudo nano /etc/network/if-pre-up.d/iptables-rules

2.-------- Добавьте следующий код со ссылкой на файл, содержащий сохранённые правила iptables:
#!/bin/bash
iptables-restore < /etc/iptables/rules.v4
exit 0

3.-------- Сохраните и закройте файл
4.-------- Перезагрузите систему для применения настроек — они будут автоматически применены при загрузке системы.
5.-------- Проверьте успешность соединения с заблокированным портом.

После перезагрузки системы можно использовать команду iptables -L для проверки действующих правил iptables. Если правила настроены правильно, соединение с заблокированным портом должно отбрасываться. Конфигурация iptables может быть сложной, поэтому необходимо быть осторожным при изменении или удалении правил, чтобы не повредить работу сети. Желательно регулярно сохранять состояние правил и тестировать сетевые соединения после каждого изменения.



============ Управляем сетевыми подключениями в Linux с помощью консольной утилиты nmcli =================================
https://habr.com/ru/companies/vdsina/articles/512282/