Индексный дескриптор файла и классы пользователей.
Стандартные права доступа и их интерпретация для файлов и каталогов.
Специальные биты защиты.
SUID.
SGID.
Sticky Bit.
Команды и инструменты для просмотра и изменения прав доступа.
Расширенные права доступа (ACL).


======== Индексный дескриптор файла и классы пользователей =========================
Индексный дескриптор файла (File Descriptor) — это целочисленный идентификатор, который используется операционной системой Linux для управления открытыми файлами. Каждый процесс имеет свой набор индексных дескрипторов файлов, которые могут быть использованы для чтения, записи и управления файлами.

Индексные дескрипторы файлов могут быть получены с помощью системных вызовов: open(), creat() и socket(). Когда файл открывается, ядро Linux выделяет индексный дескриптор и связывает его с открытым файлом. Индексный дескриптор используется для доступа к файлу в последующих операциях чтения и записи.

Команда lsof (list open files) используется для просмотра индексных дескрипторов файлов в Linux. Она показывает список всех открытых файлов и соответствующих им процессов, включая индексные дескрипторы файлов. Команда может быть запущена с правами root (суперпользователь) для просмотра всех открытых файлов в системе.


lsof 
sudo lsof -p <PID>	Пример использования команды lsof для просмотра индексных дескрипторов файлов
<PID> - идентификатор процесса, для которого необходимо просмотреть индексные дескрипторы файлов.

------ Классы пользователей в Linux----------------------
	— это группы пользователей, которые имеют общие права доступа к определённым ресурсам или функциям в системе. В Linux существует несколько классов пользователей:
	root (суперпользователь)
Пользователь root имеет полный доступ к системе и может выполнять любые операции, включая установку программ, изменение конфигурации и удаление файлов.
	пользователи системы
Пользователи системы имеют доступ к определённым функциям системы, таким как управление сетью или управление пользователями.
	обычные пользователи
Обычные пользователи имеют ограниченные права доступа и могут выполнять только те действия, которые разрешены им системным администратором.


======== Стандартные права доступа и их интерпретация для файлов и каталогов ===============
Стандартные права доступа для файлов и каталогов определяются с помощью трехзначного числа, которое состоит из трёх частей:
	Права доступа для владельца файла (user).
	Права доступа для группы, к которой принадлежит файл (group)
	Права доступа для всех остальных пользователей (others).
	Каждый из этих типов пользователей может получить одно из трех разрешений на доступ к файлу или каталогу:

Чтение 		(r)
Запись 		(w)
Выполнение 	(x)
Типичная строка прав доступа в Linux:
-rwxrwxrwx 1 owner group 0 Apr 1 12:00 test_file.txt

Первый символ "-" указывает на тип файла, в данном случае это обычный файл.  
Затем следуют три группы символов rwx, каждая из которых представляет права доступа для владельца, группы пользователей и других пользователей соответственно. В нашем примере у всех трёх групп пользователей установлены все три права доступа.

Числовая формы записи прав доступа
Модификатор доступа состоит из трех цифр, которые соответствуют разрешениям для владельца файла, группы и всех остальных пользователей. Каждый разряд может иметь значение от 0 до 7, где 7 соответствует полным правами доступа, а 0 соответствует отсутствию прав доступа.
7 (rwx) - права на чтение, запись и выполнение
6 (rw-) - права на чтение и запись
5 (r-x) - права на чтение и выполнение
4 (r--) - права на чтение
3 (-wx) - права на запись и выполнение
2 (-w-) - права на запись
1 (--x) - права на выполнение
0 (---) - нет прав доступа
Например, права доступа 755 означают, что владелец файла имеет права на чтение, запись и выполнение, а группа и все остальные пользователи имеют права только на чтение и выполнение.

Для установки прав доступа на файл или каталог используется команда chmod, например:
sudo chmod 755 file.txt			устанавливает права 755 на файл file.txt
sudo chmod 644 directory		устанавливает права 644 на каталог directory
sudo chmod -R 755 directory		ключ -R - для рекурсивной установки прав доступа (включая не только каталог, но и его дочерние каталоги и файлы) 
sudo chmod u=rwx,g=rx,o= file.txt	установка прав в символьной форме ("u" - пользователь, "g" - группа, "o" – остальные).

Также команда chmod используется для установки прав на выполнение файлов в Linux. При использовании этой команды права на выполнение файла будут установлены для всех пользователей системы.

chmod +x script.sh			если нужно установить права на выполнение скрипта с именем script.sh, то нужно выполнить следующую команду. После выполнения этой команды скрипт script.sh будет иметь права на выполнение для всех пользователей системы. Это позволит запускать скрипт, как исполняемый файл.

============== Специальные биты защиты =================================
— это дополнительные биты, которые могут быть установлены для файлов и каталогов, чтобы изменить их поведение при доступе к ним.
Существует три специальных бита защиты: 
SUID,  
SGID и 
Sticky Bit.

------ Смена идентификатора (SUID) -------------------------------------
	SUID, setuid, setguid, SGID
	Set User ID upon execution
	Установка ID пользователя/группы во время выполнения
позволяет запустить процесс непривилегированному пользователю с правами владельца файла.
Скопируем программу id в домашнюю директорию и попробуем назначить SUID:
$ mkdir -p /tmp/test3 && cd /tmp/test3
$ cp /usr/bin/id .
$ sudo chown root:admuser ./id
$ sudo chmod u+s,a+rx id
$ ls -la id
-rwsr-xr-x 1 root admuser 43560 Jun  7 13:26 id
Числовой аналог
+s,a+rx — 4555			 4 (r--) - права на чтение. 5 (r-x) - права на чтение и выполнение.
$ ./id
uid=1000(admuser) gid=1001(admuser) euid=0(root) groups=1001(admuser),10(wheel),48(docker),304(vboxusers),443(sudo)
У нас появился EUID
EUID
	— это эффективный идентификатор пользователя, он изменяется для процессов (не для пользователя) с битом setuid, которые выполняет пользователь. Если вызвать основную команду id, а не напечатанную нами, то никакого euid не будет:
$ id
uid=1000(admuser) gid=1001(admuser) groups=1001(admuser),10(wheel),48(docker),304(vboxusers),443(sudo)
Здесь уже нет euid, потому что не назначен SUID.

История «из жизни»!
$ cd /tmp/test3
$ cp /bin/touch				# Копируем команду touch в текущую папку
$ sudo chown root:root touch
$ sudo chmod 4755 touch
$ ./touch testfile

$ ls -la
total 152
drwxr-xr-x  2 admuser 	admuser    40 Jun  9 00:09 .
drwx------ 59 admuser 	admuser  8192 Jun  9 00:04 ..
-rw-r--r--  1 root  	admuser     0 Jun  9 00:09 testfile
-rwsr-xr-x  1 root 	root  	43560 Jun  9 00:05 id
-rwsr-xr-x  1 root 	root  	96936 Jun  9 00:09 touch
Файл был создан под владельцем root.
	Используя SUID, будьте очень аккуратны и внимательны, поскольку криво назначенные права позволят непривилегированному пользователю поднять уже свои права в системе. Это может привести к непредсказуемым последствиям, например утечке важных данных.
Помимо euid существует понятие ruid.
RUID 
	- это настоящий идентификатор пользователя, который не меняется. Когда пользователь входит в систему, оболочка запускается с его реальным идентификатором, и все процессы, запускающиеся из оболочки, наследуют реальный идентификатор.
Как работает passwd?
У passwd установлен setuid bit:
$ ls -la /bin/passwd
-rws--x--x 1 root root 60384 May 16 01:28 /bin/passwd
Когда пользователь меняет свой пароль командой /usr/bin/passwd, RUID пользователя остаётся прежним, а EUID станет root. Таким образом, процесс passwd может произвести запись в файлы /etc/passwd и /etc/shadow.
Также passwd проверяет ruid пользователя, иначе вы могли бы поменять пароль любого пользователя в системе без каких-либо прав.


============ SGID ============================
	(cмена группового идентификатора)
	аналогичен SUID, но устанавливаются права группы владельца файла. 
	Если SGID назначен директории, то создаваемые в директории объекты получат идентификатор группы владельца. То есть новые файлы и директории, создаваемые в директории с установленным SGID, будут наследовать права от директории-родителя.
Рассмотрим пример:
$ mkdir -p /tmp/test4 && cd /tmp/test4
$ cp /usr/bin/id .
$ chmod g+s,a+rx id
$ ls -la id
-rwxr-sr-x 1 admuser admuser 43560 Jun  7 13:26 id
Числовой аналог g+s,a+rx — 2555.
$ ./id
uid=1000(admuser) gid=1001(admuser) egid=0(root) groups=0(root),10(wheel),48(docker),304(vboxusers),443(sudo),1001(admuser)
	Аналогично SUID появился egid (Effective Group ID). То есть процесс выполнится с правами текущего пользователя и группой владельца.
Держите пример:
$ cp /usr/bin/touch .
$ ls -la touch
-rwxr-xr-x 1 admuser admuser 96936 Sep 19 14:02 touch
$ sudo chown root.root touch
$ sudo chmod g+s,a+rx touch
$ ls -la touch
-rwxr-sr-x 1 root root 96936 Sep 19 14:02 touch
$ ./touch 123
$ ls -la 123
-rw-r--r-- 1 admuser root 0 Sep 19 14:02 123
В примере мы поменяли gid для копии команды touch и создали с помощью неё файл. Новый файл создался с правами текущего пользователя и группой владельца процесса. Если в правах мы видим S, это значит, что setuid/setgid bit включён, но eXecute не разрешён. Так как suid/sgid перекрывают X, то такой набор прав не имеет смысла.


============= Sticky bit =========================
	запрещает удаление файла при наличии достаточных прав, если вы не его владелец. Это правило не распространяется для root. Типичный пример использования /tmp или /var/tmp
Назначается sticky bit chmod +t или в числовом выражении 1777:
$ chmod +t [path_to_directory]
Sticky bit выглядит как буква t в конце первой колонки вывода ls -l. Если не задан eXecution bit для всех (others), то будет T.


============= Команды и инструменты для просмотра и изменения прав доступа =======================
Существует несколько команд и инструментов для просмотра и изменения прав доступа к файлам и каталогам.

ls 		команда для просмотра списка файлов и каталогов. 
ls -l		при использовании опции "-l" она выводит дополнительную информацию о каждом файле, включая права доступа.  
ls -li		с индексами файлов
Например, вывод команды "ls -l" может выглядеть следующим образом:
   -rw-r--r-- 1 user user 1234 Jan 1 00:00 file.txt
   drwxr-xr-x 2 user user 4096 Jan 1 00:00 directory
Первые десять символов в строке означают права доступа к файлу или каталогу.  
Первый символ 
"-" 	указывает на тип объекта (файл), а последующие три символа 
"rw-" 	указывают на права доступа для владельца файла. Следующие три символа 
"r--" 	указывают на права доступа для группы пользователей,  а последние три символа 
"r--" 	указывают на права доступа для всех остальных пользователей.

chmod 	команда для изменения прав доступа к файлам и каталогам. Она позволяет устанавливать, изменять и снимать права доступа для владельца файла, группы пользователей и всех остальных пользователей.  
Например:
chmod u+x file.txt			устанавливает право выполнения для владельца файла.

chown 					команда для изменения владельца файла или каталога. Она позволяет изменять владельца и группу пользователей, которым принадлежит файл или каталог.  Например:
chown user:group file.txt 		изменяет владельца и группу пользователей для файла.

chgrp  					команда для изменения группы пользователей, которой принадлежит файл или каталог. Она позволяет изменять только группу пользователей, не изменяя владельца файла или каталога.  
Например:
chgrp group file.txt			изменяет группу пользователей для файла.

getfacl и setfacl			инструменты для работы с расширенными атрибутами доступа (ACL). Они позволяют устанавливать дополнительные права доступа для конкретных пользователей или групп пользователей.  Например:
setfacl -m u:user:rwx file.txt		устанавливает права чтения, записи и выполнения для конкретного пользователя.

Правильное использование команд и инструментов для просмотра и изменения прав доступа позволяет обеспечить безопасность файловой системы и защитить данные от несанкционированного доступа.


============= Расширенные права доступа (acl) =============================================
		Access List (acl)
Каждый файл в любой файловой системе будет иметь владельца, группу и права. Когда нескольким пользователям нужен доступ к одному и тому же файлу, а принадлежат они к разным группам, нам помогут расширенные права доступа или Access List (acl). Проверим, что поддержка acl включена, для этого поищем во всех файлах /boot/config строку с конфигурацией ACL:

$ cat /boot/config* | grep _ACL
CONFIG_EXT4_FS_POSIX_ACL=y
... для уменьшения размера листинга вырезаны однотипные записи ...
CONFIG_NFS_V3_ACL=y
Если знак + есть в списке прав, это значит, что у файла есть расширенные права.
Пример:
$ ls -l
total 0
-rw-rw-r--+ 1 admuser admuser 0 Jun  7 10:30 1
-rw-r--r--  1 admuser admuser 0 Jun  7 10:30 2
-rw-r--r--  1 admuser admuser 0 Jun  7 10:30 3
Для просмотра дополнительных разрешений используется команда getfacl:
$ getfacl file1
# file: file1
# owner: admuser
# group: admuser
user::rw-
group::r--
group:admuser:rw-
group:max:rw-
mask::rw-
other::r--
Первые две и последняя строки содержат стандартные права на файл, а далее мы видим расширенные права на группы admuser и max. Поле mask — это не пользователь, а специальная возможность ограничивающая права доступа, некий фильтр, ограничивающий максимально возможные права доступа.
Важно! Нельзя назначать права rwx для others по соображениям безопасности, поскольку любой процесс может получить доступ к этому файлу или к этому каталогу.
Если взглянуть на права файла без acl, то можно увидеть лишь стандартные:
$ getfacl file2
# file: file2
# owner: admuser
# group: admuser
user::rw-
group::r--
other::r--
----------------- Назначим расширенных прав (acl) ------------------------
		Access List (acl) - Когда нескольким пользователям нужен доступ к одному и тому же файлу, а принадлежат они к разным группам, нам помогут расширенные права доступа или Access List (acl)
		Назначим расширенные права на файл file1:
$ mkdir -p /tmp/test5 && touch /tmp/test5/file1
$ setfacl -m u:max:rw /tmp/test5/file1			пользователь max, который используется в этой команде, уже должен быть в системе
-m 							опция заставляет команду setfacl модифицировать права на файл:

$ setfacl -m g:max:rw /tmp/test5/file1			группа max, которая используется в этой команде, уже должен быть в системе
Можно назначить сразу много прав одной командой:

$ setfacl -m u:max:rw,g:admuser:rwx /tmp/test5/file1	с помощью ACL мы даже заранее можем назначить права по умолчанию для новых файлов.

Назначим права RW по умолчанию для вновь создаваемых файлов в директории для пользователя max:
$ sudo mkdir /tmp/data
$ sudo setfacl -m default:u:max:rw /tmp/data
$ sudo getfacl /tmp/data
# file: /tmp/data
# owner: root
# group: root
user::rwx
group::r-x
other::r-x
default:user::rwx
default:user:max:rw-
default:group::r-x
default:mask::rwx
default:other::r-x
В default появилась запись default:user:max:rw-.
Теперь создадим файл и проверим его расширенные права:
$ sudo touch /tmp/data/test
$ sudo getfacl /tmp/data/test
getfacl: Removing leading '/' from absolute path names
# file: tmp/data/test
# owner: root
# group: root
user::rw-
user:max:rw-
group::r-x
mask::rw-
other::r--
Мы видим, что у файла сразу появились расширенные права доступа, которые были унаследованы от родительской директории.
Вы можете сохранить разветвлённую систему расширенных прав:
$ cd /tmp/data
$ sudo getfacl -R * > /tmp/accounts_facl

----------------- Удаление расширенных прав ------------------------
-x			используется опция для удаления расширенных прав
$ sudo setfacl -x u:max /tmp/data/test
-b			для удаления всех расширенных прав используется опция 
$ sudo setfacl -b /tmp/data/test

Убеждаемся, что расширенные права удалены:
$ sudo getfacl /tmp/data/test
getfacl: Removing leading '/' from absolute path names
# file: tmp/data/test
# owner: root
# group: root
user::rw-
group::r-x
other::r--
После чего можно легко восстановить эти права:
setfacl --restore=/tmp/accounts_facl
Проверяем, что права вернулись:
$ sudo getfacl /tmp/data/test
getfacl: Removing leading '/' from absolute path names
# file: tmp/data/test
# owner: root
# group: root
user::rw-
user:max:rw-
group::r-x
mask::rw-
other::r--
Знания различных возможностей назначения прав пользователей позволят гибко управлять правами и не допускать критических ошибок.



================ Практическое задание ==================
Цель практической работы:	научиться работать с дискреционным доступом
Задача: 			
			
Что делает команда chmod 764 file?
Назначает права доступа к файлу file
7 (rwx) - права на чтение, запись и выполнение для "u" - пользователя
6 (rw-) - права на чтение и запись для "g" - группы
4 (r--) - права на чтение для "o" – остальных
admilya@astra-net-terminal:~$ touch file
admilya@astra-net-terminal:~$ chmod 764 file
admilya@astra-net-terminal:~$ ls -l
-rwxrw-r-- 1 admilya admilya    0 авг  4 13:53 file
---------------------------------------------------

Нужно ли на исполняемый файл делать chmod +x file.sh ?
если нужно установить права на выполнение скрипта с именем file.sh, то да. После выполнения этой команды скрипт file.sh будет иметь права на выполнение для всех пользователей системы. Это позволит запускать скрипт, как исполняемый файл.
admilya@astra-net-terminal:~$ touch file.sh
admilya@astra-net-terminal:~$ chmod +x file.sh
admilya@astra-net-terminal:~$ ls -l
-rwxr-xr-x 1 admilya admilya    0 авг  4 13:55 file.sh
------------------------------------------------------

Что делает команда setfacl -m u:max:rw /etc/fstab ?
Модифицируются права на файл fstab 
Когда пользователю max нужен доступ к файлу /etc/fstab на запись и чтение, а он принадлежат к другой группе, помогут расширенные права доступа или Access List (acl)установить для "g" - группы
4 (r--) - права на чтение для "o" – остальных

Нужно ли на исполняемый файл делать chmod +x file.sh ?
если нужно установить права на выполнение скрипта с именем file.sh, то да. После выполнения этой команды скрипт file.sh будет иметь права на выполнение для всех пользователей системы. Это позволит запускать скрипт, как исполняемый файл.

Что делает команда setfacl -m u:max:rw /etc/fstab ?
Модифицируются права на файл fstab 
Когда пользователю max нужен доступ к файлу /etc/fstab на запись и чтение, а он принадлежат к другой группе, помогут расширенные права доступа или Access List (acl)
admilya@astra-net-terminal:~$ sudo getfacl /etc/fstab
getfacl: Removing leading '/' from absolute path names
# file: etc/fstab
# owner: root
# group: root
user::rw-
group::r--
other::r--
 
admilya@astra-net-terminal:~$ sudo setfacl -m u:admilya:rw /etc/fstab
admilya@astra-net-terminal:~$ sudo getfacl /etc/fstab
getfacl: Removing leading '/' from absolute path names
# file: etc/fstab
# owner: root
# group: root
user::rw-
user:admilya:rw-
group::r--
mask::rw-
other::r--


Как сдать работу на проверку?
- прикрепите файл со скриншотами и текстовыми пояснениями.<a></a>