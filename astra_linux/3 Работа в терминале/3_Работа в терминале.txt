План урока:
Типы терминалов.
Вход и выход из системы.
Дополнение и отслеживание команд и имён переменных.
Структура командной строки.
Форматы записи параметров.
Работа с переменными.
Символы подстановки в именах файлов и командная подстановка.
Выполнение арифметических вычислений.
Отмена значений специальных символов.
Назначение псевдонимов.
Утилита screen (мультиплексор).
Использование помощи по встроенным в интерпретатор командам.
История команд.
Практическое задание.

=============== Типы терминалов ========================
1. Аппаратный терминал  (ВЦ НГУ СО РАН)
Физическое устройство, которое подключается к компьютеру и используется для ввода и вывода текста. 

2. Виртуальный терминал
Визуальное окно на компьютере, которое используется для работы с командой строкой.  
Виртуальный терминал в Linux является виртуальной консолью, которая позволяет пользователю работать с командной строкой, как если бы он работал в реальной консоли. 
В Linux можно использовать несколько виртуальных терминалов одновременно, что упрощает работу с системой. 
!!!! Важно !!!!
По умолчанию Linux имеет 6 виртуальных терминалов, которые можно открыть, нажав сочетание клавиш Ctrl+Alt+F1, Ctrl+Alt+F2, … , Ctrl+Alt+F6. Каждый виртуальный терминал имеет свой собственный номер: F1-F6 соответствуют терминалам с номерами 1–6.

3. Псевдотерминал (по SSH)
Терминал, который похож на обычный терминал, но работает в виде файла.  
Псевдотерминал (Pseudo Terminal, PTY) — это виртуальный терминал, который эмулирует работу физического терминала. Он используется для связи между процессами, которые работают в разных терминалах: вы запускаете терминальное приложение, оно создаёт псевдотерминал, который связывается с процессом, запустившим терминал. Это позволяет процессу, который запустил терминал, взаимодействовать с терминалом, как если бы он был физическим терминалом. 
Псевдотерминалы используются для многих целей, например, для удалённого доступа к серверу через SSH, для запуска графических приложений в терминале, для запуска скриптов, которые требуют ввода с клавиатуры, и т. д.
!!!! Важно !!!!
Чтобы подключиться к вашей виртуальной машине, введите следующую команду: ssh логин@ip_адрес_вм затем внесите в ключ в known_host, введя «Yes», нажмите Enter и введите пароль от ВМ.


Каждый псевдотерминал имеет два режима: мастер и слейв. 
Мастер-терминал 
является точкой входа для процесса, который запустил терминал, а 
слейв-терминал 
является точкой входа для терминального приложения.
Настройка псевдотерминала может быть выполнена с помощью PTY, которая позволяет создавать, открывать и закрывать псевдотерминалы, а также устанавливать их параметры.

============== Вход и выход из системы =======================================================
============== Команды =======================================================================
	man {util} --help
	man man
	man interfaces
	env		вывод переменных окружения
	PATH=это список директорий, где исполняемый машина будет искать наш файл скрипта, тогда можно не указывать путь, где находится скрипт, я имею в виду ./my-script
Где можно настроить переменные окружения:
	cat .profile
	cat .
============= мультиплексор screen ===========================================================
sudo apt install screen
screen
Ctrl+A и d			выход из сессии мультиплексора	
screen -ls
screen -r {number/name of the screen session}
Ctrl+c				прерывание текущей команды
Ctrl+d				завершение сессии мультиплексора
screen -S {имя сессии}		Наименование сессии. Сессий screen можно запускать несколько, а для удобства сессиям можно давать имя: screen -S my_screen. screen позволяет удобно запускать несколько оболочек в одном окне. 
Вот краткий список горячих клавиш:
Ctrl+a c			создать ещё одну оболочку в сессии;
Ctrl+a "			просмотреть список оболочек в текущем сеансе (сессии) screen;
Ctrl+a {0,1,2}			переключиться на NUM окно, где NUM — это номер окна;
Ctrl+a A			переименовать окно;
Ctrl+a Shift+s (S)		разделить окно горизонтально;
Ctrl+a |			разделить окно вертикально;
Ctrl+a tab			переключиться в следующий терминал в пределах окна;
Ctrl+a Ctrl+a			переключиться между предыдущим окном и текущим;
Ctrl+a X			закрыть текущую оболочку;
Ctrl+a :quit			закрыть текущую сессию;
Ctrl+a Q			закрыть всё, кроме текущей оболочки;


============= Символы подстановки в именах файлов и командная подстановка ===================
ls /tmp
ls -p | grep -v /tmp
ls -p directory/ 		добавляет символ «слеш» к имени каталога, в результате чего вывод выглядит так: directory/.


============ Арифметические вычисления с помощью команды expr или $(()) =====================
expr 8 + 7
echo $((5+4))

============ Специальные символы могут быть отменены с помощью экранирования ================
Отмену значений иначе называют «экраном» (этим экраном является обратный слэш «\»), т.е. мы экранируем команды, в которых встречаются служебные символы), например, попробуйте ввести MY_NAME=|ваше_имя и вы получите ошибку, так как символ «|» является служебным, его надо «заэкранировать»:
MY_NAME=\-\-\-Илья
echo $MY_NAME
	
============ alias ==========================================================================
Команда alias (псевдоним) используется для создания псевдонима команды или списка команд, то есть присваивает им новые названия. Это нужно для того, чтобы не запоминать длинные и сложные команды. Команда alias принимает один параметр пары ключ-значение: alias NAME=”VALUE”.

!!! Внимание !!!
Термин «ключ-значение» в Linux относится к формату хранения и передачи данных, где каждый элемент содержит пару значений: ключ и соответствующее ему значение. Ключ обычно является словом, символом или строкой, которые идентифицирует элемент, а значение может быть любым типом данных, включая другие пары ключ-значение. Этот формат используется в различных контекстах в Linux, таких как конфигурационные файлы, базы данных и команды в терминале.

В общем виде создание alias выглядит следующим образом:
alias name=value
alias name='command'
alias name='command arg1 arg2'
alias name='/path/to/script'
alias name='/path/to/script.pl arg1'
Псевдонимы могут использоваться для упрощения выполнения команд. Вместо того, чтобы каждый раз полностью писать какую-либо команду, вы можете задать alias, например, вместо sudo apt update задаём alias upd:

alias upd_sys='sudo apt update'
upd_sys
	
=========== man или --help =======================================================================
Для получения помощи по команде можно использовать команду man или - -help. Это позволят вам получить справку по команде и детально узнать о её использовании.
man ls.
Чтобы выйти из справки нажмите «q».

=========== history  =============================================================================
История команд хранит список последних выполненных команд.  Чтобы просмотреть историю команд, можно использовать команду history. Можем повторять команды записанные в history командой:
!{номер_строки}
