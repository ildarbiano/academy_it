Bash.
Переменные.
Присвоение переменным альтернативных значений.
Массивы.
Работа со строками.
Длина значения переменной.
Ввод и вывод данных.
Конструкции условного перехода.
Обработка ошибок.
Практическое задание.
https://regex101.com/

=============== Bash (Bourne Again SHell) ========================================
		— это командная оболочка, используемая во многих Unix/Linux-подобных операционных системах. Интерфейс в виде командной строки позволяет пользователям взаимодействовать с операционной системой и выполнять различные задачи. Bash предлагает множество встроенных команд и функций для запуска программ и управления файлами, директориями и процессами. Она также поддерживает скрипты — наборы команд, выполняемых последовательно или автоматически.

=============== Переменные в bash ================================================
объявляются без ключевого слова var — указывается лишь имя переменной и её значение.
В этом скрипте мы создаём две переменные (name и age) и выводим их значения на экран:
#!/bin/bash
name="Vladimir"
age=30
echo "Меня зовут $name и мне $age лет."
# Вывод: Меня зовут Vladimir и мне 30 лет

=============== Присвоение переменным альтернативных значений в Bash ====================
Альтернативное присвоение значений переменным в Bash происходит через использование арифметических операций.
В этом скрипте мы меняем значения переменных x и y местами, используя три дополнительные переменные:
#!/bin/bash
x=5
y=10
# Меняем значения переменных местами
x=$((x+y))
y=$((x-y))
x=$((x-y))
echo "x = $x, y = $y"
# Вывод: x = 10, y = 5

=============== Массивы в Bash ==================================================
	объявляются в круглых скобках (), а элементы разделяются пробелами. Доступ к элементам массива осуществляется через индексы — начиная с 0.
В этом скрипте мы меняем значение второго элемента массива и выводим все элементы на экран:
#!/bin/bash
arr=("apple" "banana" "cherry" "orange")
# Доступ к элементам массива
echo ${arr[0]} # Вывод: apple
echo ${arr[2]} # Вывод: cherry
# Изменение элементов массива
arr[1]="kiwi"
echo ${arr[@]} # Вывод: apple kiwi cherry orange

================ Работа со строками в Bash ======================================
		осуществляется через специальные операторы срезов. В этом скрипте мы получаем первый и последний символы строки, а также выводим часть строки с седьмого символа до последнего и первые пять символов:
#!/bin/bash
s="Hello, World!"
# Доступ к символам строки
echo ${s:0:1} # Вывод: H
echo ${s:(-1)} # Вывод: !
# Срезы строк
echo ${s:7} # Вывод: World!
echo ${s:0:5} # Вывод: Hello

================ Длина значения переменной в Bash ======================================
		Определение длины значения переменной в Bash происходит через использование символа # перед именем переменной. В этом скрипте мы определяем длину строки s и выводим это значение на экран:
#!/bin/bash
s="Hello, World!"
echo ${#s} 
# Вывод: 13

================ Ввод данных в Bash ================================================
		осуществляется через команду read, после которой указывается имя переменной, в которую будет сохранено введённое значение. В этом скрипте мы запрашиваем у пользователя его имя и выводим приветствие с его именем:
#!/bin/bash
echo "Введите ваше имя:"
read name
echo "Привет, $name!"
# Вывод: Введите ваше имя:
# Vladimir
# Привет, Vladimir!


================ Конструкции условного перехода в Bash ==============================
		позволяют программе принимать решения на основе выполнения определённых условий. Оператор if проверяет заданное условие: 
если оно истинно — блокирует код, указанный после него; 
если ложно — блокирует код, указанный после оператора else.
В конструкции условного перехода есть операторы elif (сокращённое else if), которые позволяют проверять дополнительные условия, в случае если первое не было выполнено.
Также в Bash используются операторы сравнения.
Операторы сравнения в конструкциях условий заключаются в одинарные квадратные скобки [] для всех числовых значений. Также используются логические операторы:
&& 	(логическое «и») и 
|| 	(логическое «или») для объединения нескольких условий.
Проверим значение переменной Х и выведем соответствующее сообщение на экран в зависимости от выполнения условия:
#!/bin/bash
x=5
if [ $x -gt 10 ]			#-проверяет заданное условие: если оно истинно — блокирует код, указанный после него; если ложно — блокирует код, указанный после оператора else.
then
    echo "x больше 10"
elif [ $x -lt 5 ]			#-позволяют проверять дополнительные условия
then
    echo "x меньше 5"
else
    echo "x равен 5"
fi
# Вывод: x равен 5
Если Х больше 10 — выводится сообщение: x больше 10. 
Если X меньше пяти — выводится сообщение: X меньше 5. 
Если ни одно из этих условий не выполняется — выводится сообщение: X равен 5.

А теперь проверим, равны ли значения переменных Х и Y:
#!/bin/bash
x=5
y=10
if [ $x -eq $y ]
then
    echo "x равен y"
else
    echo "x не равен y"
fi
# Вывод: x не равен y

===================== Обработка ошибок в Bash ================================
		 используется оператор if: он проверяет различные условия. Проверим, является ли введённое значение числом и выведем соответствующее сообщение на экран:
#!/bin/bash
echo "Введите число:"
read x
if [[ $x =~ ^[0-9]+$ ]]
then
    echo "Вы ввели число $x"
else
    echo "Ошибка! Введите число."
fi
# Вывод: Введите число:
#        abc
#        Ошибка! Введите число.
Если введённое значение не число — выводится сообщение об ошибке.

Разберём конструкцию if [[ $x =~ ^[0-9]+$ ]]. Она проверяет, является ли значение переменной x строкой, состоящей только из цифр:
^		— символ начала строки;
$ 		— символ конца строки.
[0–9]		— символьный класс, который соответствует любой цифре от 0 до 9;
+		— символ, означающий «один или более раз»;
$(command) 	- подстановка команды 	
$""		- подстановка переменной
${}		- 
$()		- 

Таким образом, выражение ^[0-9]+$ означает «строка, которая начинается с одной или более цифр и заканчивается после этих цифр».
=~ 		- Оператор, используется для сравнения значения переменной "x" с регулярным выражением ^[0-9]+$. Если значение соответствует этому выражению — условие в if выполняется и возвращается true (1) "then", иначе — false (0) "else".

Двойные квадратные скобки в конструкции if [[ ]] используются для более продвинутых проверок условий, которые не заключаются в одинарные квадратные скобки. Например, в двойные скобки заключаются операторы сравнения, логические операторы, а также регулярные выражения. Переменные в двойных скобках не заключаются в кавычки:
if [[ $x -gt 10 && $y == hello ]] 
Важно!
При написании скриптов на Bash учитывайте особенности языка: осторожно используйте пробелы и кавычки для правильной интерпретации команд. Также обращайте внимание на права доступа к файлам и директориям, чтобы избежать ошибок в выполнении команд.
При всей мощи Bash имеет свои ограничения и недостатки. Её, например, не поддерживает объектно-ориентированное программирование, а при вводе данных оболочка требует точно указывать их тип. Однако в сочетании с другими языками программирования или утилитами Bash довольно эффективна.


======================= BASH_REMATCH ================================
		 — специальный массив в Bash, в котором хранятся результаты сопоставления строк с шаблонами, определёнными регулярными выражениями. 
Структура массива:
BASH_REMATCH 						- содержит всю строку, которая совпала с шаблоном регулярного выражения.   
BASH_REMATCH, BASH_REMATCH, BASH_REMATCH и так далее 	— части строки, которые совпали с захватывающими группами в шаблоне регулярного выражения, в порядке их появления в шаблоне. Захватывающие группы обозначаются скобками ( ) в шаблоне регулярного выражения и используются для захвата определённой части совпавшего текста. 
BASH_REMATCH						- применяется внутри функции 'if' - 'fi' применительно к условиям.
if [[ $x =~ $reg ]]
then
y=${BASH_REMATCH[1]}
z=${BASH_REMATCH[2]}
q=${BASH_REMATCH[3]}
 
fio="$y$z$q"
#   echo "Вы ввели '$x' = '$y''$z''$q' = '$fio'"
   echo "Ваше  ФИО состоит из ${#fio}-символов, не считаю пробелов между словами"
else
   echo "!!!! ОШИБКА!"
   echo "<< Важно учитывать >>"
   echo "!--- ФИО не может включать или состоять из цифр."
   echo "!--- ожидается состав ФИО из трёх слов"
   echo "Повторите попытку"
fi



======================= Практическое задание ========================================================
Практическое задание «Создание сценариев Bash»
Время выполнения: 20 мин
Цель практической работы: научиться писать скрипты bash
Задача:
Напишите скрипт, который выводит на экран введённые с клавиатуры ФИО и выводит число, считая количество символов в ФИО (пробелы в ФИО не должны учитываться). Не забывайте давать вашему скрипту права на исполнение chmod +x script.sh
Как сдать работу на проверку?
- прикрепите файл вашего скрипта