Управление учётными записями пользователей и групп

План урока
Создание, изменение и удаление учётных записей и групп.
Изучение локальных баз учётных записей.
Сервисные учётные записи.
Управление паролями.
Настройка окружения пользователя.
Настройка SSH.
Подключение к удалённым машинам по закрытому ключу.
Практическое задание.



============ Создание, изменение и удаление учётных записей и групп ========================================
useradd				позволяет создавать учётные записи пользователя и управлять ими. При создании учётной записи пользователю автоматически присваивается уникальный идентификатор (UID) и группа (GID).
sudo useradd user_name		Создадим новую учётную запись с именем user_name. Ключи утилиты useradd настраивают различные параметры учётной записи:
-m				позволяет создать домашнюю директорию пользователя;
-s				выбрать оболочку по умолчанию;
-G				добавить пользователя в дополнительные группы.
sudo useradd -m -s /bin/bash jane	cоздадим учётную запись jane с домашней директорией (каталог имени пользователя внутри каталога /home) и выберем оболочку по умолчанию bash/
sudo adduser jane2		добавление с заполнением карточки
usermod 			позволяет изменить существующую учётную запись. Она изменяет домашнюю директорию пользователя или добавляет его в новые группы.
sudo usermod -a -G sudo user_name	добавим пользователя user_name в группу sudo.
userdel				удаляют существующие учётные записи.
groupdel 			удаляют существующие группы.
groupadd 			позволяет управлять группами.
sudo groupadd developers	создадим новую группу с именем developers.    
groupmod 			позволяет изменить существующие группы: добавить в них новых пользователей или поменять их названия.


============ Изучение локальных баз учётных записей =======================================================
/etc/passwd		Файл, локальная база данных в Linux, которые хранят информацию об учётных записях пользователей. Содержит имена, идентификаторы (UID), номера групп, комментарии, домашние директории и оболочки по умолчанию.
/etc/passwd 		Каждый пользователь имеет свою строку в файле. Строка файла состоит из полей, разделённых двоеточиями:
	vladimir:x:1000:1000:vladimir_D:/home/vladimir:/bin/bash
У каждого поля своё значение:
vladimir		имя пользователя
x			зашифрованный пароль (хэш)
1000			UID
1000			GID
vladimir_D		Комментарий
/home/vladimir		путь к домашней директории
/bin/bash		оболочка по умолчанию
/etc/shadow		Файл, локальная база данных в Linux, которые хранят информацию об учётных записях пользователей. Содержит заблокированные и зашифрованные пароли пользователей. Только пользователь root имеет доступ к содержимому этого файла. Каждый пользователь имеет свою строку в файле. Строка файла состоит из полей, разделённых двоеточиями:            
	vladimir:$6$rgZkNTn$T2lLkBzcZHrVmsoqj2DiDgzcJDJfF5a8zMFOf.NGLBZ0j.fgQmpeZGud0Uj.wRz/I/9RMw/XJhRQ5x5Z/jcmL1:18763:0:99999:7:::
У каждого поля своё значение:
vladimir 		Имя пользователя;
$6$rgZkNTnK$T2lLkBzcZHrVmsoqj2DiDgzcJDJfF5a8zMFOf.NGLBZ0j.fgQmpeZGud0Uj.wRz/I/9RMw/XjhRQ5x5Z/jcmL1 	— Зашифрованный пароль пользователя;
18763			Количество дней между 1 января 1970 года и датой последней смены пароля;
0			Минимальное количество дней до следующей смены пароля (0 означает, что пароль не будет истекать);
99999			Максимальное количество дней до следующей смены пароля (99999 означает, что пароль не будет истекать)
7			Количество дней до истечения пароля, после чего пользователь получит предупреждение о необходимости сменить пароль;
::			Дата истечения учётной записи. Пустое поле означает, что учётная запись действительна неопределённое время.
Чтобы заблокировать учётную запись необходимо изменить содержимое поля «Зашифрованный пароль пользователя» на восклицательный знак (!). Так система «увидит», что учётная запись заблокирована и закроет вход для пользователя. В результате строка в файле /etc/shadow будет выглядеть так:
      vladimir:!:18763:0:99999:7:::			Это означает, что учётная запись пользователя vladimir заблокирована.
Поле «Дата истечения учётной записи» также используют для блокировки пользователей. В этом случае вместо даты истечения учётной записи ставят восклицательный знак (!). Это позволяет временно заблокировать учётную запись без удаления из системы. Например, когда пользователь нарушил правило безопасности или не обновил пароль после истечения срока.


============ Сервисные учётные записи ======================================================================
Сервисные учётные записи		это учётные записи, которые используются для выполнения служебных задач в системе или для автоматического запуска служб на компьютере. Они, так же как и учётные записи пользователей, заносятся в файлы /etc/passwd и /etc/shadow. Сервисные учётные записи используются для управления сервисами, запускаемыми при загрузке системы или во время её работы.
Сервисные учётные записи 		обычно не взаимодействуют с конечными пользователями. Пароли сервисных учётных записей должны быть надёжными и никому не известными. Для безопасности они получают доступ к сетевым ресурсам только при крайней необходимости.
Виды и функции сервисных учётных записей вложенный файл "сервисные учётные записи. виды и функции"


============ Управление паролями ===========================================================================
passwd					Утилита позволяет управлять паролями: задавать и изменять их. Только суперпользователь имеет доступ к passwd. Утилита passwd предоставляет широкие возможности для управления паролями пользователей в Linux, позволяет обеспечить безопасность системы и защитить данные от несанкционированного доступа.
sudo passwd username			Установка пароля для новой учётной записи пользователя. После выполнения этой команды система запросит новый пароль для пользователя username.
sudo passwd username			Изменение существующего пароля пользователя. После выполнения этой команды система запросит новый пароль для пользователя username.
sudo passwd -d username			Удаление пароля учётной записи пользователя. После выполнения этой команды пароль для пользователя username будет удалён.
sudo chage -M 30 username		Ограничение срока действия пароля. Эта команда ограничит срок действия пароля для пользователя username до 30 дней. Пользователь будет получать предупреждения о необходимости смены пароля за несколько дней до истечения срока действия текущего пароля.
sudo chage -i 5 username		Запрет на использование старых паролей. Эта команда запретит использование старых паролей для пользователя username в течение пяти дней после смены пароля.
sudo passwd -l username			Блокировка учётной записи пользователя. Эта команда заблокирует учётную запись пользователя username, запретив ему доступ к системе. Символ (!) в /etc/shadow, перед хэшем пароля обозначает блокировку пользователя, это означает/позволяет временно заблокировать учётную запись без удаления из системы.
sudo passwd -u username 		Разблокировка учётной записи пользователя. Эта команда разблокирует учётную запись пользователя username и позволит ему снова получить доступ к системе.


============ Настройка окружения пользователя .bashrc ==============================================================
При входе любого пользователя в систему для него запускается особый экземпляр оболочки — login shell. В процессе запуска в качестве login shell bash ищет следующие файлы:
/etc/profile			политики ко всем пользователям. Выполняется первым из последовательности
~/.bash_profile			личный профайд пользователя, но выполняется при оболчки bash
~/.bash_login			... при авторизации пользователя
~/.profile			общий скрипт для всех терминалов
source .profile			перезапись, перезагрузка .profile
source ~/.profile		перезапись, перезагрузка .profile
и выполняет содержащиеся в них команды.
~/.bashrc			файл конфигурации всего bash. Если bash запускается повторно из командной строки в интерактивном режиме (т. е. не для выполнения какой-то одиночной команды), то он находит файл ~/.bashrc и выполняет содержащиеся в нем команды. 
~/.bashrc			Конфигурация переменных окружения пользователя в Astra Linux, предназначена для настройки параметров среды рабочего стола пользователя. Обычно эти настройки включают настройку директорий, цветовую схему, язык и некоторые другие параметры. 
~/.bashrc			запускается каждый раз, когда пользователь входит в систему.
~/.bashrc			Этот файл используется для установки переменных окружения, настройки путей и запуска других настроек. Например, настроим переменную окружения JAVA_HOME, указав установленный в системе путь к JDK. Для этого откроем файл .bashrc в текстовом редакторе и добавим следующую строку:
	export JAVA_HOME=/usr/lib/jvm/default-java
После этого сохраним файл и, чтобы обновить текущую среду, выполним следующую команду:
source ~/.bashrc		обновить текущую среду. 
~/.bashrc			можно добавить свои собственные настройки в файл .bashrc. Например, добавим команду для вывода текущей даты и времени в новой строке каждый раз, когда пользователь входит в систему. Для этого добавим следующую строку в конце файла .bashrc, после завершения скриптов fi:
	echo «Welcome! Today is $(date)» После этого сохраним файл и выполним команду source ~/.bashrc, чтобы обновить текущую среду.
source ~/.bashrc		обновить текущую среду. перезапись, перезагрузка .bashrc
~/.bashrc			настройка цветовой схемы для командной оболочки. Для этого можно изменить значение переменной окружения PS1. Например, чтобы установить зеленый цвет фона в командной оболочке, добавим следующую строку в файл .bashrc:
	PS1=’\[\e[42m\]\u@\h \w \$ \[\e[0m\]’
Эта строка задаёт значение переменной PS1 в следующем формате:
	\[\e[42m\]		- зеленый цвет фона
	\u@\h			— имя пользователя и имя хоста
	\w			— текущая рабочая директория
	\$			— знак доллара для обозначения командной строки
	\[\e[0m\]		— возврат к обычному цвету текста
После этого сохраним файл и выполним команду source ~/.bashrc, чтобы обновить текущую среду.
~/.bashrc			обновить текущую среду
.bashrc				мощный инструмент для настройки параметров окружения, и его можно использовать для настройки множества других функций и параметров в зависимости от потребностей пользователей.
source ~/.bashrc		перезапись, перезагрузка .bashrc
source ~/.profile		перезапись, перезагрузка .profile

============ Настройка SSH ============================================================================================
SSH 	(Secure Shell)	— это сетевой протокол, который используется для безопасного удалённого управления компьютером. SSH-сервер можно настроить на Linux для удалённого доступа к терминалу или файлам системы. Во многих дистрибутивах Linux SSH-сервер установлен и запущен по умолчанию.
/etc/ssh/sshd_config	- Для настройки и изменения конфигурации SSH-сервера используется файл. Параметры конфигурационных файлов.
Важно!
/etc/ssh/sshd_config 	- конфигурационный файл имеет и другие параметры настройки SSH-сервера, которые можно изменить в зависимости от требований и настроек безопасности вашей системы. Перед внесением изменений в конфигурационный файл убедитесь, что понимаете значение каждого параметра, чтобы избежать ошибок и некорректной настройки системы
	Port			— номер порта, который используется для соединения с SSH-сервером. По умолчанию SSH использует порт 22.
	AllowGroups		— список групп пользователей, у которых есть доступ к SSH-серверу.
	DenyUsers		— список пользователей, которым запрещён доступ к SSH-серверу.
	PasswordAuthentication	- разрешает или запрещает парольную аутентификацию.
	PubkeyAuthentication	- разрешает или запрещает аутентификацию с использованием ключей.
	PermitRootLogin		- разрешает или запрещает пользователю root входить на SSH-сервер. Если значение установлено в no, значит, пользователь root не сможет подключиться удалённо к серверу через SSH.
	PasswordAuthentication	- разрешает или запрещает аутентификацию по паролю. Если установлено значение no, значит, аутентификация по паролю отключена.
	PubkeyAuthentication	- включает или отключеает аутентификацию по ключу. Если установлено значение yes, значит, SSH-сервер использует файлы ключей для аутентификации пользователей.
	PermitEmptyPasswords	- разрешает или запрещает создавать учётные записи пользователей с пустыми паролями. Если установлено значение no, значит, создавать пользователей с пустыми паролями запрещено.
	MaxAuthTries		— максимальное количество попыток аутентификации. Если пользователь не может аутентифицироваться после определённого количества попыток, его соединение с сервером разорвётся.
	ClientAliveInterval	— интервал времени между проверками активности клиента.
	ClientAliveCountMax	— максимальное количество проверок активности клиента перед разрывом соединения с сервером.
	AllowTcpForwarding	- разрешает или запрещает передавать данные по TCP. Если установлено значение no, то SSH-сервер не будет передавать данные через TCP.
	X11Forwarding		- разрешает или запрещает X11-туннелирование.
	GatewayPorts		- разрешает или запрещает удалённый доступ к проброшенным портам.
	SubSystem		- привязывает подсистему к SSH-серверу, позволяя ей работать через sshd.
	TCPKeepAlive		- разрешает или запрещает использовать TCP-пакеты KeepAlive при инициировании соединения.
Примеры настройки параметров SSH-сервера:
	PermitRootLogin no		Запрещаем вход пользователю root.
	PasswordAuthentication no	Запрещаем аутентификацию по паролю.
	PubkeyAuthentication yes	Включаем аутентификацию по ключу.
	PermitEmptyPasswords no		Запрещаем создавать учётные записи с пустыми паролями.
	MaxAuthTries 3			Устанавливаем максимальное количество попыток аутентификации.
	ClientAliveInterval 120		Устанавливаем интервал между проверками активности клиента (в секундах).
	ClientAliveCountMax 2		Устанавливаем максимальное количество проверок активности клиента.
sudo systemctl restart sshd		после редактирования /etc/ssh/sshd_config не забудьте перезапустить службу.


============ Подключение к удалённым машинам по закрытому ключу ====================================================================
					Начнём с генерации RSA-ключа.
RSA	(Rivest-Shamir-Adleman)		— это асимметричный алгоритм шифрования, который шифрует и расшифровывает данные с использованием двух разных ключей: открытого и закрытого.
ssh-keygen -t rsa -b 4096		- в результате мы получим публичный (открытый) и приватный (закрытый) ключи. Они будут по умолчанию в домашнем каталоге в скрытой папке .ssh - файлы id_rsa и id_rsa.pub. Для доступа к удалённой машине необходимо разместить публичный ключ в очередной строчке файла .ssh/authorized_keys.
Часто используемые атрибуты при генерации:
-t 					— тип ключа
-b					— длина ключа в битах (по умолчанию 3072 для RSA)
-f					— путь к файлу ключа (по умолчанию ~/.ssh/id_rsa)
-C					— комментарий к ключу (по умолчанию username@hostname)
-P					— пароль для доступа к ключу
ssh-copy-id -i $HOME/.ssh/id_rsa.pub user@{hostname_куда}		- После того как сгенерировали, публичный ключ можно закинуть на машину, куда необходимо подключиться.
-i 					— указывает путь к файлу с открытым ключом (если не указано, используется файл ~/.ssh/id_rsa.pub)
-n 					— не контактирует с удалённой системой, а печатает, что было бы выполнено.
user@{hostname_куда}			— указывает удалённый сервер, на который будет скопирован ключ.
ssh-copy-id user@{hostname_куда}	- если файл {$HOME/.ssh/id_rsa.pub} не переименовывали, т.е. он имеет стандартное имя и путь.
ssh user@{hostname_куда}		— Повключаемся к удалённой машине, куда необходимо подключиться. SSH важный инструмент для работы удалённых серверов и обеспечения безопасного доступа к ним.



============ Управление аутентификацией и авторизацией с помощью PAM ================================================================
PAM					— это модуль, который подключается к различным программам, выполняющим аутентификацию, и предоставляет единый интерфейс управления правами доступа. Astra Linux поддерживает использование PAM для управления аутентификацией и авторизацией.
/etc/pam.d/				- Файлы конфигурации PAM. Любой файл конфигурации PAM состоит из строк, каждая из которых содержит: 
•	имя модуля; 
•	тип службы; 
•	аргументы модуля, разделённые пробелами. 
Тип службы определяет, к какому типу пакета PAM он будет относиться, например заголовок (header), футер (footer) и так далее. Аргументы зависят от модуля, который был выбран.
/etc/pam.d/login 			- Пример настройки использования PAM для аутентификации в файле /etc/pam.d/login выглядит так:
	#%PAM-1.0
	auth requisite pam_securetty.so
	auth requisite pam_nologin.so
	auth include system-auth
	account include system-auth
	session include system-auth
/etc/security/access.conf		- для авторизации PAM использует правила. В этом файле можно задавать правила для доступа пользователей к определённым системным ресурсам. Пример правила в файле /etc/security/access.conf:
	# Allow root user full access
	+:root:ALL

	# Allow user «example» to access system resources only from local IP addresses
	+ :example :192.168.0.0/16
	— :example : ALL
где
+:root:ALL  				позволяет пользователю root полный доступ к системным ресурсам. 
+ :example :192.168.0.0/16 		позволяет пользователю example получить доступ только с IP-адресов в диапазоне 192.168.0.0/16. 
- :example : ALL 			запрещает пользователю example доступ ко всем остальным системным ресурсам.
Конфигурация PAM в Astra Linux содержит правила управления паролями пользователей. Например, можно задать минимальную длину пароля или максимальное количество попыток входа для безопасной аутентификации. 
/etc/pam.d/passwd			Допустим, мы хотим установить минимальную длину пароля в восемь символов. Для этого мы добавляем в файл /etc/pam.d/passwd строку. Эта строка обозначает использование PAM-модуля 'pam_pwquality' для проверки безопасных условий пароля. Параметр minlen=8 указывает, что длина пароля не должна быть меньше восьми символов. Теперь при попытке создания или изменения пароля пользователь будет получать ошибку, если длина пароля меньше восьми символов.:
	password requisite pam_pwquality.so minlen=8	
Также PAM используется для установки максимального количества попыток входа пользователя в систему. Для этого можно использовать модуль 'pam_tally2'
---
	auth        required    		pam_tally2.so 			deny=3 unlock_time=600 	root_deny=3 root_unlock_time=60 
	auth [success*ignore default*die] 	pam_tally.so 	per_user 	deny*3 unlock_time*300
``` 
**Перед внесением изменений в конфигурационные файлы** рекомендуется создать резервные копии, чтобы предотвратить потенциальные проблемы. 
**Также важно следить за журналами системы (/var/log/auth.log или /var/log/secure), чтобы отслеживать любые ошибки аутентификации или доступа. 
---
authconfig --update   			после внесения изменений в файл /etc/pam.d/system-auth, обновите системные файлы, чтобы применить новые настройки.


============ Дополнительные материалы ===============================================================================================
Разработка и применение модуля PAM для аутентификации 	https://habr.com/ru/companies/aktiv-company/articles/144700/ 
sshd_config	https://www.opennet.ru/man.shtml?topic=sshd_config&category=5&russian=0